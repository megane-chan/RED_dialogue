scale_fill_brewer(palette = "Pastel1")
filtered_da <- dialogue_act_counts %>%
filter(count >= 20)
ggplot(filtered_da, aes(x = dialogue_act, y = count, fill = dialogue_act)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Distribution of Dialogue Acts",
x = "Dialogue Act",
y = "Proportion of Dialogue Acts") +
scale_fill_brewer(palette = "Pastel1")
# plot dialogue act by speaker
df_rest %>%
filter(speaker %in% filtered_speaker_counts$speaker) %>%
ggplot(aes(x = speaker, fill = dialogue_act)) +
geom_bar(position = "fill") +
theme_minimal() +
labs(title = "Distribution of Dialogue Acts by Speaker",
x = "Speaker",
y = "Proportion of Dialogue Acts") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_brewer(palette = "Pastel1")
df_rest %>% glimpse()
df_rest$speaker %>%unique()
library(dplyr)
gender_map <- c(
Oleg = "Male", Ashley = "Female", Katya = "Female", Vika = "Female",
Will = "Male", Saleh = "Male", All = "Unspecified", Alex = "Male", Igor = "Male"
)
data_with_gender <- df_rest %>%
mutate(gender = gender_map[speaker])
data_with_gender$gender[is.na(data_with_gender$gender)] <- "Unknown"
print(head(data_with_gender))
data_with_gender %>% glimpse()
data_with_gender %>% skim()
library(dplyr)
data_with_gender <- data_with_gender %>% select(-content) %>%
arrange(session) %>%
group_by(session) %>%
mutate(
sender = lag(speaker, 1),
receiver = speaker,
snd_da = lag(dialogue_act, 1),
rec_da = dialogue_act,
snd_gender = gender,
rec_gender = lag(gender, 1),
) %>% drop_na() %>% select(-speaker) %>%
ungroup()
head(data_with_gender)
names(data_with_gender)
names(data_with_gender)
rem_data <- data_with_gender
rem_data %>% select(-speaker) %>% select(session, sender, receiver, snd_gender, rec_gender, snd_da, rec_da)
rem_data %>%  select(session, sender, receiver, snd_gender, rec_gender, snd_da, rec_da)
head(rem_data)
rem_data <- data_with_gender  %>%  select(session, sender, receiver, snd_gender, rec_gender, snd_da, rec_da)
head(rem_data)
library(rem)
library(rem)
install.packages("rem")
install.packages("rem")
library(rem)
library(rem)
rem_model <- rem(
formula = rec_da ~ snd_da + snd_gender + rec_gender,
sender = "sender",
receiver = "receiver",
data = rem_data,
id = "session"
)
library(rem)
rem_model <- rem.dyad(
formula = rec_da ~ snd_da + snd_gender + rec_gender,
sender = "sender",
receiver = "receiver",
data = rem_data,
id = "session"
)
library(rem)
data$snd_gender <- as.character(data$snd_gender)
data$snd_gender
library(rem)
data <- rem_data
data$snd_gender <- as.character(data$snd_gender)
data$rec_gender <- as.character(data$rec_gender)
data$snd_da <- as.character(data$snd_da)
data$rec_da <- as.character(data$rec_da)
rem_data <- rem.dyad(
sender = data$sender,
receiver = data$receiver,
eventtime = 1:nrow(data),
data = data
)
rem_data <- rem.dyad(
sender = data$sender,
receiver = data$receiver,
eventtime = 1:nrow(data),
data = data
)
rem_data <- rem.dyad(
sender = sender,
receiver = receiver,
eventtime = 1:nrow(data),
data = data
)
rem_data <- rem.dyad(
sender = data$sender,
receiver = data$receiver,
eventtime = 1:nrow(data),
)
rem_data <- rem.dyad(
sender = data$sender,
receiver = data$receiver,
eventtime = 1:nrow(data), # If you don't have an event time, you can use row numbers as a proxy
data = data
)
rem_data <- rem.dyad(
sender = data$sender,
receiver = data$receiver,
eventtime = 1:nrow(data), # If you don't have an event time, you can use row numbers as a proxy
data = data
)
rem_data <- as.rem(
session = data$session,
time = seq_along(data$session), # Replace this with your actual time column if available
sender = data$sender,
receiver = data$receiver,
meta = data
)
library(rem)
data <- rem_data
data$snd_gender <- as.character(data$snd_gender)
data$rec_gender <- as.character(data$rec_gender)
data$snd_da <- as.character(data$snd_da)
data$rec_da <- as.character(data$rec_da)
rem_data <- as.rem(
session = data$session,
time = seq_along(data$session), # Replace this with your actual time column if available
sender = data$sender,
receiver = data$receiver,
meta = data
)
library(rem)
data <- rem_data
data$sender <- as.factor(data$sender)
data$receiver <- as.factor(data$receiver)
data$snd_gender <- as.factor(data$snd_gender)
data$rec_gender <- as.factor(data$rec_gender)
data$snd_da <- as.factor(data$snd_da)
data$rec_da <- as.factor(data$rec_da)
# Fit the relational event model
# Note that we use the 'rem' function, not 'rem.dyad' or 'as.rem'
rem_model <- rem(
formula = rec_da ~ snd_da + snd_gender + rec_gender,
sender = "sender",
receiver = "receiver",
data = data
)
# Fit the relational event model
# Note that we use the 'rem' function, not 'rem.dyad' or 'as.rem'
rem_model <- rem(
)
# Fit the relational event model
# Note that we use the 'rem' function, not 'rem.dyad' or 'as.rem'
rem_model <- rem(
data = data,
sender = "sender",
receiver = "receiver"
)
# Fit the relational event model
# Note that we use the 'rem' function, not 'rem.dyad' or 'as.rem'
rem_model <- rem(
data = data
)
# Fit the relational event model
# Note that we use the 'rem' function, not 'rem.dyad' or 'as.rem'
rem_model <- rem(eventlist = data,
sender = "sender",
receiver = "receiver",
timevar = "session",
model = "reciprocal",
directed = FALSE,
parallel = FALSE,
verbose = TRUE)
# Fit the relational event model
# Note that we use the 'rem' function, not 'rem.dyad' or 'as.rem'
rem_model <- rem(eventlist = data,
directed = FALSE,
parallel = FALSE,
verbose = TRUE)
eventlist
data
# Fit the relational event model
# Note that we use the 'rem' function, not 'rem.dyad' or 'as.rem'
rem_model <- rem(directed = FALSE,
parallel = TRUE,
verbose = TRUE)
# Fit the relational event model
# Note that we use the 'rem' function, not 'rem.dyad' or 'as.rem'
rem_model <- rem(data, directed = FALSE,
parallel = TRUE,
verbose = TRUE)
# Fit the relational event model
# Note that we use the 'rem' function, not 'rem.dyad' or 'as.rem'
rem_model <- rem(data
)
# Fit the relational event model
# Note that we use the 'rem' function, not 'rem.dyad' or 'as.rem'
rem_model <- rem(data）
# Fit the relational event model
# Note that we use the 'rem' function, not 'rem.dyad' or 'as.rem'
rem_model <- rem(data)
# Fit the relational event model
# Note that we use the 'rem' function, not 'rem.dyad' or 'as.rem'
rem_model <- rem(data)
data
library(rem)
data <- rem_data
data$sender <- as.factor(data$sender)
data$receiver <- as.factor(data$receiver)
data$snd_gender <- as.factor(data$snd_gender)
data$rec_gender <- as.factor(data$rec_gender)
data$snd_da <- as.factor(data$snd_da)
data$rec_da <- as.factor(data$rec_da)
rem_model <- rem(data)
library(rem)
data <- rem_data
data$sender <- as.factor(data$sender)
data$receiver <- as.factor(data$receiver)
data$snd_gender <- as.factor(data$snd_gender)
data$rec_gender <- as.factor(data$rec_gender)
data$snd_da <- as.factor(data$snd_da)
data$rec_da <- as.factor(data$rec_da)
# Create the REM dataset
rem_dataset <- createRemDataset(
sender = data$sender,
receiver = data$receiver,
eventTime = seq_along(data$session), # Assuming sequential events for simplicity
data = data
)
library(rem)
data <- rem_data
data$sender <- as.factor(data$sender)
data$receiver <- as.factor(data$receiver)
data$snd_gender <- as.factor(data$snd_gender)
data$rec_gender <- as.factor(data$rec_gender)
data$snd_da <- as.factor(data$snd_da)
data$rec_da <- as.factor(data$rec_da)
# Create the REM dataset
rem_dataset <- createRemDataset(
sender = data$sender,
receiver = data$receiver,
data = data
)
library(rem)
data <- rem_data
data$sender <- as.factor(data$sender)
data$receiver <- as.factor(data$receiver)
data$snd_gender <- as.factor(data$snd_gender)
data$rec_gender <- as.factor(data$rec_gender)
data$snd_da <- as.factor(data$snd_da)
data$rec_da <- as.factor(data$rec_da)
# Create the REM dataset
rem_dataset <- createRemDataset(
sender = data$sender,
receiver = data$receiver
)
library(rem)
data <- rem_data
people_list <- unique(data$sender) %>% union(unique(data$receiver))
lookup_table <- setNames(seq_along(people_list), people_list)
data[,'sender_id'] <- lookup_table[data$sender]
data[,'receiver_id'] <- lookup_table[data$receiver]
library(rem)
data <- rem_data
people_list <- unique(data$sender) %>% union(unique(data$receiver))
lookup_table <- setNames(seq_along(people_list), people_list)
data[,'sender_id'] <- lookup_table[data$sender]
data[,'receiver_id'] <- lookup_table[data$receiver]
data
# Last Updated: 02/12
rm(list = ls())
# Load libraries
library(rstudioapi)
library(tidyverse)
library(tidyr)
library(ggplot2)
library(dplyr)
library(RColorBrewer)
library(dplyr)
library(igraph)
library(readxl)
library(igraph)
library(glmnet)
library(remsonic)
library(skimr)
library(dplyr)
library(relevent)
# Set Path
setwd("~/RProjects/SNA_REM/REM_new/")
# read performance
data <- read.csv("data/perfs_21.csv")
data_sorted <- data[order(-data$perf), ]
# Add a column to label high and low performance
data_sorted <- mutate(data_sorted, perf_level = ifelse(row_number() <= n()/2, 1, 0))
data_sorted <- data_sorted %>% sort()
data_sorted %>% glimpse()
summary(data_sorted)
high_perf_data <- filter(data_sorted, perf_level == 1)
low_perf_data <- filter(data_sorted, perf_level == 0)
df <- read.csv("data/combined.csv")
df <- df[!df$speaker %in% c("-", "N/A", "[Audio from 0","Today is February 8th, 2022. It is mission day 96. Time is",0, "Олег","Alex to Oleg"),]
df <- df %>%
# Separate the 'speaker' column into multiple rows where there are commas
separate_rows(speaker, sep = ",\\s*") %>%
# Optional: Clean up the 'speaker' column to ensure consistency
mutate(speaker = trimws(speaker))
# Existing and expanded name corrections
name_corrections <- c(
"Will:" = "Will",
"Wil" = "Will",
"Maybe Will" = "Will",
"Ale" = "Alex",
"Al" = "Alex",
"Ole" = "Oleg",
"Ashle" = "Ashley",
"Oleg:" = "Oleg",
"Saleh:" = "Saleh",
"Sala" = "Saleh",
"Salah:" = "Saleh",
"Salah" = "Saleh",
"Man" = NA, # Assuming you want to exclude non-specific entries
"Woman" = NA,
"Video" = NA,
"Man2:" = NA,
"Man2" = NA,
"Man 2" =NA,
"Woman1" = NA,
# Handle other specific cases as needed
"Ashely:" = "Ashley",
"Vika:" = "Vika",
"VIka" = "Vika",
"Ashely" = "Ashley",
"Maybe Salah" = NA,
"Salah" = "Saleh",
"Vika." = "Vika",
"Vik" = "Vika",
"Vila" = "Vika",
"Kata" = "Katya",
"Salah" = "Saleh",
# Correcting to the closest name
# Add more corrections as needed
"Asley" = "Ashley",
"Ashley:" = "Ashley",
"Igo" = "Igor",
"Maybe Katya" = NA,
"Maybe Vika" = NA,
"Maybe Alex" = NA,
"Maybe Oleg" = NA,
"Maybe Saleh" = NA,
"Maybe Igor"  =  NA,
"Maybe Katy" = NA,
"Salah" = "Saleh",
"Maybe Ashley" = NA,
# Assuming decision to remove non-specific and "Maybe" prefixed entries
"Salah and Man 3" = NA,
# Example of excluding a problematic entry
"Man2:" =  NA,
"Man 2" = NA,
"Man3"= NA,
"Woman1" = NA,
"Woman2" = NA,
# Handle other group names or non-name entries as needed
"Video" = NA # Assuming you decide to exclude 'Video' as a non-name entry
)
# Apply corrections
df$speaker <- ifelse(df$speaker %in% names(name_corrections),
name_corrections[df$speaker],
df$speaker)
# remove NA
df <- df[!is.na(df$speaker),]
unique_speakers <- df$speaker %>% unique()
unique_speakers
# see what Alex says
df_alex <- df[df$speaker == "Alex",]
print(df_alex)
df <- df %>%
mutate(dialogue_act = ifelse(speaker == "All" & grepl("Mark", content),
"decision_point",
dialogue_act))
df_rest <- df[df$session != "2101",]
df_rest$speaker %>%
unique()
speaker_counts <- df_rest %>%
filter(speaker %in% unique(df_rest$speaker)) %>%
group_by(speaker) %>%
summarise(count = n())
print(speaker_counts)
dialogue_act_counts <- df_rest %>%
filter(dialogue_act %in% unique(df_rest$dialogue_act)) %>%
group_by(dialogue_act) %>%
summarise(count = n())
print(dialogue_act_counts)
filtered_speaker_counts <- speaker_counts %>%
filter(count >= 20)
ggplot(filtered_speaker_counts, aes(x = speaker, y = count, fill = speaker)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Distribution of Dialogue Contributions by Speaker (Counts >= 5)",
x = "Speaker",
y = "Count of Contributions") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_brewer(palette = "Pastel1")
filtered_da <- dialogue_act_counts %>%
filter(count >= 20)
ggplot(filtered_da, aes(x = dialogue_act, y = count, fill = dialogue_act)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Distribution of Dialogue Acts",
x = "Dialogue Act",
y = "Proportion of Dialogue Acts") +
scale_fill_brewer(palette = "Pastel1")
# plot dialogue act by speaker
df_rest %>%
filter(speaker %in% filtered_speaker_counts$speaker) %>%
ggplot(aes(x = speaker, fill = dialogue_act)) +
geom_bar(position = "fill") +
theme_minimal() +
labs(title = "Distribution of Dialogue Acts by Speaker",
x = "Speaker",
y = "Proportion of Dialogue Acts") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_brewer(palette = "Pastel1")
df_rest %>% glimpse()
df_rest$speaker %>%unique()
library(dplyr)
gender_map <- c(
Oleg = "Male", Ashley = "Female", Katya = "Female", Vika = "Female",
Will = "Male", Saleh = "Male", All = "Unspecified", Alex = "Male", Igor = "Male"
)
data_with_gender <- df_rest %>%
mutate(gender = gender_map[speaker])
data_with_gender$gender[is.na(data_with_gender$gender)] <- "Unknown"
print(head(data_with_gender))
data_with_gender %>% glimpse()
data_with_gender %>% skim()
library(dplyr)
data_with_gender <- data_with_gender %>% select(-content) %>%
arrange(session) %>%
group_by(session) %>%
mutate(
sender = lag(speaker, 1),
receiver = speaker,
snd_da = lag(dialogue_act, 1),
rec_da = dialogue_act,
snd_gender = gender,
rec_gender = lag(gender, 1),
) %>% drop_na() %>% select(-speaker) %>%
ungroup()
head(data_with_gender)
rem_data <- data_with_gender  %>%  select(session, sender, receiver, snd_gender, rec_gender, snd_da, rec_da)
head(rem_data)
library(rem)
data <- rem_data
people_list <- unique(data$sender) %>% union(unique(data$receiver))
lookup_table <- setNames(seq_along(people_list), people_list)
data[,'sender_id'] <- lookup_table[data$sender]
data[,'receiver_id'] <- lookup_table[data$receiver]
data
dialog_act <- sort(unique(data$dialog_act)) %>% as.factor()
graph_1903
dialog_act <- sort(unique(data$dialog_act)) %>% as.factor()
data$sender <- as.factor(data$sender)
data$receiver <- as.factor(data$receiver)
data$snd_gender <- as.factor(data$snd_gender)
data$rec_gender <- as.factor(data$rec_gender)
data$snd_da <- as.factor(data$snd_da)
data$rec_da <- as.factor(data$rec_da)
rem_dataset <- createRemDataset(
sender = data$sender,
receiver = data$receiver
)
dialog_act <- sort(unique(data$dialog_act)) %>% as.factor()
data$sender <- as.factor(data$sender)
data$receiver <- as.factor(data$receiver)
data$snd_gender <- as.factor(data$snd_gender)
data$rec_gender <- as.factor(data$rec_gender)
data$snd_da <- as.factor(data$snd_da)
data$rec_da <- as.factor(data$rec_da)
rem_dataset <- createRemDataset(
sender = data$sender_id,
receiver = data$receiver_id
)
dialog_act <- sort(unique(data$dialog_act)) %>% as.factor()
data$sender <- as.factor(data$sender)
data$receiver <- as.factor(data$receiver)
data$snd_gender <- as.factor(data$snd_gender)
data$rec_gender <- as.factor(data$rec_gender)
data$snd_da <- as.factor(data$snd_da)
data$rec_da <- as.factor(data$rec_da)
rem_dataset <- createRemDataset(
sender = data$sender_id,
receiver = data$session$receiver_id
)
dialog_act <- sort(unique(data$dialog_act)) %>% as.factor()
data$sender <- as.factor(data$sender)
data$receiver <- as.factor(data$receiver)
data$snd_gender <- as.factor(data$snd_gender)
data$rec_gender <- as.factor(data$rec_gender)
data$snd_da <- as.factor(data$snd_da)
data$rec_da <- as.factor(data$rec_da)
rem_dataset <- createRemDataset(data
)
