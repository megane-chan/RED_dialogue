# Last Updated: 02/12
rm(list = ls())
# Load libraries
library(rstudioapi)
library(tidyverse)
library(tidyr)
library(ggplot2)
library(dplyr)
library(RColorBrewer)
library(dplyr)
library(igraph)
library(readxl)
library(igraph)
library(glmnet)
library(remsonic)
library(skimr)
library(dplyr)
library(relevent)
# Set Path
setwd("~/RProjects/SNA_REM/REM_new/")
# read performance
data <- read.csv("data/perfs_21.csv")
data_sorted <- data[order(-data$perf), ]
# Add a column to label high and low performance
data_sorted <- mutate(data_sorted, perf_level = ifelse(row_number() <= n()/2, 1, 0))
data_sorted <- data_sorted %>% sort()
data_sorted %>% glimpse()
summary(data_sorted)
high_perf_data <- filter(data_sorted, perf_level == 1)
low_perf_data <- filter(data_sorted, perf_level == 0)
df <- read.csv("data/combined.csv")
df <- df[!df$speaker %in% c("-", "N/A", "[Audio from 0","Today is February 8th, 2022. It is mission day 96. Time is",0, "Олег","Alex to Oleg"),]
df <- df %>%
# Separate the 'speaker' column into multiple rows where there are commas
separate_rows(speaker, sep = ",\\s*") %>%
# Optional: Clean up the 'speaker' column to ensure consistency
mutate(speaker = trimws(speaker))
# Existing and expanded name corrections
name_corrections <- c(
"Will:" = "Will",
"Wil" = "Will",
"Maybe Will" = "Will",
"Ale" = "Alex",
"Al" = "Alex",
"Ole" = "Oleg",
"Ashle" = "Ashley",
"Oleg:" = "Oleg",
"Saleh:" = "Saleh",
"Sala" = "Saleh",
"Salah:" = "Saleh",
"Salah" = "Saleh",
"Man" = NA, # Assuming you want to exclude non-specific entries
"Woman" = NA,
"Video" = NA,
"Man2:" = NA,
"Man2" = NA,
"Man 2" =NA,
"Woman1" = NA,
# Handle other specific cases as needed
"Ashely:" = "Ashley",
"Vika:" = "Vika",
"VIka" = "Vika",
"Ashely" = "Ashley",
"Maybe Salah" = NA,
"Salah" = "Saleh",
"Vika." = "Vika",
"Vik" = "Vika",
"Vila" = "Vika",
"Kata" = "Katya",
"Salah" = "Saleh",
# Correcting to the closest name
# Add more corrections as needed
"Asley" = "Ashley",
"Ashley:" = "Ashley",
"Igo" = "Igor",
"Maybe Katya" = NA,
"Maybe Vika" = NA,
"Maybe Alex" = NA,
"Maybe Oleg" = NA,
"Maybe Saleh" = NA,
"Maybe Igor"  =  NA,
"Maybe Katy" = NA,
"Salah" = "Saleh",
"Maybe Ashley" = NA,
# Assuming decision to remove non-specific and "Maybe" prefixed entries
"Salah and Man 3" = NA,
# Example of excluding a problematic entry
"Man2:" =  NA,
"Man 2" = NA,
"Man3"= NA,
"Woman1" = NA,
"Woman2" = NA,
# Handle other group names or non-name entries as needed
"Video" = NA # Assuming you decide to exclude 'Video' as a non-name entry
)
# Apply corrections
df$speaker <- ifelse(df$speaker %in% names(name_corrections),
name_corrections[df$speaker],
df$speaker)
# remove NA
df <- df[!is.na(df$speaker),]
unique_speakers <- df$speaker %>% unique()
unique_speakers
# see what Alex says
df_alex <- df[df$speaker == "Alex",]
print(df_alex)
df <- df %>%
mutate(dialogue_act = ifelse(speaker == "All" & grepl("Mark", content),
"decision_point",
dialogue_act))
df_rest <- df[df$session != "2101",]
df_rest$speaker %>%
unique()
speaker_counts <- df_rest %>%
filter(speaker %in% unique(df_rest$speaker)) %>%
group_by(speaker) %>%
summarise(count = n())
print(speaker_counts)
dialogue_act_counts <- df_rest %>%
filter(dialogue_act %in% unique(df_rest$dialogue_act)) %>%
group_by(dialogue_act) %>%
summarise(count = n())
print(dialogue_act_counts)
filtered_speaker_counts <- speaker_counts %>%
filter(count >= 20)
ggplot(filtered_speaker_counts, aes(x = speaker, y = count, fill = speaker)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Distribution of Dialogue Contributions by Speaker (Counts >= 5)",
x = "Speaker",
y = "Count of Contributions") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_brewer(palette = "Pastel1")
filtered_da <- dialogue_act_counts %>%
filter(count >= 20)
ggplot(filtered_da, aes(x = dialogue_act, y = count, fill = dialogue_act)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Distribution of Dialogue Acts",
x = "Dialogue Act",
y = "Proportion of Dialogue Acts") +
scale_fill_brewer(palette = "Pastel1")
# plot dialogue act by speaker
df_rest %>%
filter(speaker %in% filtered_speaker_counts$speaker) %>%
ggplot(aes(x = speaker, fill = dialogue_act)) +
geom_bar(position = "fill") +
theme_minimal() +
labs(title = "Distribution of Dialogue Acts by Speaker",
x = "Speaker",
y = "Proportion of Dialogue Acts") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_brewer(palette = "Pastel1")
df_rest %>% glimpse()
df_rest$speaker %>%unique()
library(dplyr)
gender_map <- c(
Oleg = "Male", Ashley = "Female", Katya = "Female", Vika = "Female",
Will = "Male", Saleh = "Male", All = "Unspecified", Alex = "Male", Igor = "Male"
)
data_with_gender <- df_rest %>%
mutate(gender = gender_map[speaker])
data_with_gender$gender[is.na(data_with_gender$gender)] <- "Unknown"
print(head(data_with_gender))
data_with_gender %>% glimpse()
data_with_gender %>% skim()
library(dplyr)
data_with_gender <- data_with_gender %>% select(-content) %>%
arrange(session) %>%
group_by(session) %>%
mutate(
sender = lag(speaker, 1),
receiver = speaker,
snd_da = lag(dialogue_act, 1),
rec_da = dialogue_act,
snd_gender = gender,
rec_gender = lag(gender, 1),
) %>% drop_na() %>% select(-speaker) %>%
ungroup()
head(data_with_gender)
rem_data <- data_with_gender  %>%  select(session, sender, receiver, snd_gender, rec_gender, snd_da, rec_da)
head(rem_data)
library(rem)
data <- rem_data
people_list <- unique(data$sender) %>% union(unique(data$receiver))
lookup_table <- setNames(seq_along(people_list), people_list)
data[,'snd_id'] <- lookup_table[data$sender]
data[,'rec_id'] <- lookup_table[data$receiver]
data %>% select()
data
rem_dataset <- createRemDataset(start = 2102, end = 2119, sender = snd_id, receiver = rec_id, dialogue_act, eventSequence = session)
rem_dataset <- createRemDataset(start = 2102, end = 2119, sender = snd_id, target = rec_id, dialogue_act, eventSequence = session)
data %>% select(snd_id, rec_id, snd_gender, rec_gender, sna_da, rec_da_
data %>% select(snd_id, rec_id, snd_gender, rec_gender, sna_da, rec_da)
data %>% select(snd_id, rec_id, snd_gender, rec_gender, sna_da, rec_da)
data %>% select(snd_id, rec_id, snd_gender, rec_gender, snd_da, rec_da)
data %>% select(snd_id, rec_id, snd_gender, rec_gender, snd_da, rec_da)
data %>% select(snd_id, rec_id, snd_gender, rec_gender, snd_da, rec_da)
data %>% select(snd_id, rec_id, snd_gender, rec_gender, snd_da, rec_da) -> rem_data
# save as RDs
saveRDS(rem_data, "data/rem_data.rds")
setwd("~/RProjects/SNA_REM/REM_new")
# Last Updated: 02/12
rm(list = ls())
# Load libraries
library(rstudioapi)
library(tidyverse)
library(tidyr)
library(ggplot2)
library(dplyr)
library(RColorBrewer)
library(dplyr)
library(igraph)
library(readxl)
library(igraph)
library(glmnet)
library(remsonic)
library(skimr)
library(dplyr)
library(relevent)
# Set Path
setwd("~/RProjects/SNA_REM/REM_new/")
# read excel
dialog_data <- read_excel("data/nek21.xlsx", sheet = "Sheet1_Dialogs")
head(dialog_data)
df_low2103 <- dialog_data[dialog_data$session == 2103,]
head(df_low2103)
people_list <- unique(df_low2103$sender)
lookup_table <- setNames(seq_along(people_list), people_list)
print(lookup_table)
df_low2103[, 'sender_id'] <- lookup_table[df_low2103$sender]
df_low2103[, 'receiver_id'] <- lookup_table[df_low2103$receiver]
head(df_low2103)
# for event order, add 1 to make it start from 1  and icnreasing by 1 (row number)
df_low2103[, 'event_order'] <- seq(1, nrow(df_low2103))
head(df_low2103)
# Load the data
data <- data.frame(sid = df_low2103$sender_id, rid = df_low2103$receiver_id, time = df_low2103$event_order)
# Calculate statistics for the REM
stats.intercept <- Constant(data)
stats.rrecsnd <- RRecSnd(data)
stats.rsndsnd <- RSndSnd(data)
# Combine statistics
stats1 <- combine.stats(
'[Intercept]' = stats.intercept,
'RRecSnd' = stats.rrecsnd,
'RSndSnd' = stats.rsndsnd
)
# Fit the first REM model
model1 <- FitEventNetworkCore(data, stats1)
summary(model1)
# Model 2 -----------------------------------------------------------------
data <- data.frame(sid = df_low2103$sender_id, rid = df_low2103$receiver_id, time = df_low2103$event_order, sender_dialog = df_low2103$sender_dialog)
# Adding the second term: the Normalized Total Degree Received (NTDRec)
stats.ntdegrec <- NTDRec(data)
stats2 <- combine.stats(
'[Intercept]' <- stats.intercept,
'RRecSnd' = stats.rrecsnd,
'RSndSnd' = stats.rsndsnd,
'NTDegRec' = stats.ntdegrec
)
# Run the second model and check the transript_data
model2 <- FitEventNetworkCore(data, stats2, ordinal = FALSE)
summary(model2)
# add a column representing if the sender and receiver are of the same gender
same_gender <- ifelse(df_low2103$sender_gender == df_low2103$receiver_gender, 1, 0)
data <- data.frame(sid = df_low2103$sender_id, rid = df_low2103$receiver_id, time = df_low2103$event_order, sender_dialog = df_low2103$sender_dialog)
# Model 3 -----------------------------------------------------------------
stats.sameGender <- SameConstGroup(data, same_gender)
stats3 <- combine.stats(
'[Intercept]' = stats.intercept,
'RRecSnd' = stats.rrecsnd,
'RSndSnd' = stats.rsndsnd,
'NTDegRec' = stats.ntdegrec,
'SameConstGroup' = stats.sameGender
)
# Run the third model and check the transript_data
model3 <- FitEventNetworkCore(data, stats3, ordinal = FALSE)
summary(model3)
# Model 4 -----------------------------------------------------------------
#same_gender and sender_dialog
data <- data.frame(sid = df_low2103$sender_id, rid = df_low2103$receiver_id, time = df_low2103$event_order, sender_dialog = df_low2103$sender_dialog)
stats.SndDialog <- SameConstGroup(data, df_low2103$sender_dialog)
stats.RecDialog <- SameConstGroup(data, df_low2103$receiver_dialog)
stats4 <- combine.stats(
'[Intercept]' = stats.intercept,
'RRecSnd' = stats.rrecsnd,
'RSndSnd' = stats.rsndsnd,
'NTDegRec' = stats.ntdegrec,
'SameConstGroup' = stats.sameGender,
'SndDialog' = stats.SndDialog,
'RecDialog' = stats.RecDialog
)
model4 <- FitEventNetworkCore(data, stats4, ordinal = FALSE)
summary(model4)
# add a column representing if the sender and receiver are of the same gender
same_gender <- ifelse(df_low2103$sender_gender == df_low2103$receiver_gender, 1, 0)
data <- data.frame(sid = df_low2103$sender_id, rid = df_low2103$receiver_id, time = df_low2103$event_order, sender_dialog = df_low2103$sender_dialog)
# Model 3 -----------------------------------------------------------------
stats.sameGender <- SameConstGroup(data, same_gender)
stats3 <- combine.stats(
'[Intercept]' = stats.intercept,
'RRecSnd' = stats.rrecsnd,
'RSndSnd' = stats.rsndsnd,
'NTDegRec' = stats.ntdegrec,
'SameGender' = stats.sameGender
)
# Run the third model and check the transript_data
model3 <- FitEventNetworkCore(data, stats3, ordinal = FALSE)
summary(model3)
# Model 4 -----------------------------------------------------------------
#same_gender and sender_dialog
data <- data.frame(sid = df_low2103$sender_id, rid = df_low2103$receiver_id, time = df_low2103$event_order, sender_dialog = df_low2103$sender_dialog)
stats.SndDialog <- SameConstGroup(data, df_low2103$sender_dialog)
stats.RecDialog <- SameConstGroup(data, df_low2103$receiver_dialog)
stats4 <- combine.stats(
'[Intercept]' = stats.intercept,
'RRecSnd' = stats.rrecsnd,
'RSndSnd' = stats.rsndsnd,
'NTDegRec' = stats.ntdegrec,
'SameGender' = stats.sameGender,
'SndDialog' = stats.SndDialog,
'RecDialog' = stats.RecDialog
)
model4 <- FitEventNetworkCore(data, stats4, ordinal = FALSE)
summary(model4)
# Last Updated: 02/12
rm(list = ls())
# Load libraries
library(rstudioapi)
library(tidyverse)
library(tidyr)
library(ggplot2)
library(dplyr)
library(RColorBrewer)
library(dplyr)
library(igraph)
library(readxl)
library(igraph)
library(glmnet)
library(remsonic)
library(skimr)
library(dplyr)
library(relevent)
# Set Path
setwd("~/RProjects/SNA_REM/REM_new/")
# read excel
dialog_data <- read_excel("data/nek21.xlsx", sheet = "Sheet1_Dialogs")
head(dialog_data)
df_low2103 <- dialog_data[dialog_data$session == 2103,]
head(df_low2103)
people_list <- unique(df_low2103$sender)
lookup_table <- setNames(seq_along(people_list), people_list)
print(lookup_table)
df_low2103[, 'sender_id'] <- lookup_table[df_low2103$sender]
df_low2103[, 'receiver_id'] <- lookup_table[df_low2103$receiver]
head(df_low2103)
# for event order, add 1 to make it start from 1  and icnreasing by 1 (row number)
df_low2103[, 'event_order'] <- seq(1, nrow(df_low2103))
head(df_low2103)
# Load the data
data <- data.frame(sid = df_low2103$sender_id, rid = df_low2103$receiver_id, time = df_low2103$event_order)
# Calculate statistics for the REM
stats.intercept <- Constant(data)
stats.rrecsnd <- RRecSnd(data)
stats.rsndsnd <- RSndSnd(data)
# Combine statistics
stats1 <- combine.stats(
'[Intercept]' = stats.intercept,
'RRecSnd' = stats.rrecsnd,
'RSndSnd' = stats.rsndsnd
)
# Fit the first REM model
model1 <- FitEventNetworkCore(data, stats1)
summary(model1)
# Model 2 -----------------------------------------------------------------
data <- data.frame(sid = df_low2103$sender_id, rid = df_low2103$receiver_id, time = df_low2103$event_order, sender_dialog = df_low2103$sender_dialog)
# Adding the second term: the Normalized Total Degree Received (NTDRec)
stats.ntdegrec <- NTDRec(data)
stats2 <- combine.stats(
'[Intercept]' <- stats.intercept,
'RRecSnd' = stats.rrecsnd,
'RSndSnd' = stats.rsndsnd,
'NTDegRec' = stats.ntdegrec
)
# Run the second model and check the transript_data
model2 <- FitEventNetworkCore(data, stats2, ordinal = FALSE)
summary(model2)
# add a column representing if the sender and receiver are of the same gender
same_gender <- ifelse(df_low2103$sender_gender == df_low2103$receiver_gender, 1, 0)
data <- data.frame(sid = df_low2103$sender_id, rid = df_low2103$receiver_id, time = df_low2103$event_order, sender_dialog = df_low2103$sender_dialog)
# Model 3 -----------------------------------------------------------------
stats.sameGender <- SameConstGroup(data, same_gender)
stats3 <- combine.stats(
'[Intercept]' = stats.intercept,
'RRecSnd' = stats.rrecsnd,
'RSndSnd' = stats.rsndsnd,
'NTDegRec' = stats.ntdegrec,
'SameGender' = stats.sameGender
)
# Run the third model and check the transript_data
model3 <- FitEventNetworkCore(data, stats3, ordinal = FALSE)
summary(model3)
# Model 4 -----------------------------------------------------------------
#same_gender and sender_dialog
data <- data.frame(sid = df_low2103$sender_id, rid = df_low2103$receiver_id, time = df_low2103$event_order, sender_dialog = df_low2103$sender_dialog)
stats.SndDialog <- SameConstGroup(data, df_low2103$sender_dialog)
stats.RecDialog <- SameConstGroup(data, df_low2103$receiver_dialog)
stats4 <- combine.stats(
'[Intercept]' = stats.intercept,
'RRecSnd' = stats.rrecsnd,
'RSndSnd' = stats.rsndsnd,
'NTDegRec' = stats.ntdegrec,
'SameGender' = stats.sameGender,
'SndDialog' = stats.SndDialog,
'RecDialog' = stats.RecDialog
)
model4 <- FitEventNetworkCore(data, stats4, ordinal = FALSE)
summary(model4)
# Last Updated: 02/12
rm(list = ls())
# Load libraries
library(rstudioapi)
library(tidyverse)
library(tidyr)
library(ggplot2)
library(dplyr)
library(RColorBrewer)
library(dplyr)
library(igraph)
library(readxl)
library(igraph)
library(glmnet)
library(remsonic)
library(skimr)
library(dplyr)
library(relevent)
# Set Path
setwd("~/RProjects/SNA_REM/REM_new/")
# read excel
dialog_data <- read_excel("data/nek21.xlsx", sheet = "Sheet1_Dialogs")
head(dialog_data)
df_high2105 <- dialog_data[dialog_data$session == 2105,]
head(df_high2105)
people_list <- unique(df_high2105$sender)
lookup_table <- setNames(seq_along(people_list), people_list)
print(lookup_table)
df_high2105[, 'sender_id'] <- lookup_table[df_high2105$sender]
df_high2105[, 'receiver_id'] <- lookup_table[df_high2105$receiver]
head(df_high2105)
# for event order, add 1 to make it start from 1  and icnreasing by 1 (row number)
df_high2105[, 'event_order'] <- seq(1, nrow(df_high2105))
head(df_high2105)
# Load the data
data <- data.frame(sid = df_high2105$sender_id, rid = df_high2105$receiver_id, time = df_high2105$event_order)
# Calculate statistics for the REM
stats.intercept <- Constant(data)
stats.rrecsnd <- RRecSnd(data)
stats.rsndsnd <- RSndSnd(data)
# Combine statistics
stats1 <- combine.stats(
'[Intercept]' = stats.intercept,
'RRecSnd' = stats.rrecsnd,
'RSndSnd' = stats.rsndsnd
)
# Fit the first REM model
model1 <- FitEventNetworkCore(data, stats1)
summary(model1)
# Model 2 -----------------------------------------------------------------
data <- data.frame(sid = df_high2105$sender_id, rid = df_high2105$receiver_id, time = df_high2105$event_order, sender_dialog = df_high2105$sender_dialog)
# Adding the second term: the Normalized Total Degree Received (NTDRec)
stats.ntdegrec <- NTDRec(data)
stats2 <- combine.stats(
'[Intercept]' <- stats.intercept,
'RRecSnd' = stats.rrecsnd,
'RSndSnd' = stats.rsndsnd,
'NTDegRec' = stats.ntdegrec
)
# Run the second model and check the transript_data
model2 <- FitEventNetworkCore(data, stats2, ordinal = FALSE)
summary(model2)
# add a column representing if the sender and receiver are of the same gender
same_gender <- ifelse(df_high2105$sender_gender == df_high2105$receiver_gender, 1, 0)
data <- data.frame(sid = df_high2105$sender_id, rid = df_high2105$receiver_id, time = df_high2105$event_order, sender_dialog = df_high2105$sender_dialog)
# Model 3 -----------------------------------------------------------------
stats.sameGender <- SameConstGroup(data, same_gender)
stats3 <- combine.stats(
'[Intercept]' = stats.intercept,
'RRecSnd' = stats.rrecsnd,
'RSndSnd' = stats.rsndsnd,
'NTDegRec' = stats.ntdegrec,
'SameGender' = stats.sameGender
)
# Run the third model and check the transript_data
model3 <- FitEventNetworkCore(data, stats3, ordinal = FALSE)
summary(model3)
# Model 4 -----------------------------------------------------------------
#same_gender and sender_dialog
data <- data.frame(sid = df_high2105$sender_id, rid = df_high2105$receiver_id, time = df_high2105$event_order, sender_dialog = df_high2105$sender_dialog)
stats.SndDialog <- SameConstGroup(data, df_high2105$sender_dialog)
stats.RecDialog <- SameConstGroup(data, df_high2105$receiver_dialog)
stats4 <- combine.stats(
'[Intercept]' = stats.intercept,
'RRecSnd' = stats.rrecsnd,
'RSndSnd' = stats.rsndsnd,
'NTDegRec' = stats.ntdegrec,
'SameGender' = stats.sameGender,
'SndDialog' = stats.SndDialog,
'RecDialog' = stats.RecDialog
)
model4 <- FitEventNetworkCore(data, stats4, ordinal = FALSE)
summary(model4)
