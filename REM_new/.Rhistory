# get the high performance session 2104, 2105, 2112, 2113, 2114, 2118
for(s in high_perf$session){
print(paste("Session: ", s))
# name each df based on the session and store as data frame
assign(paste("df_high_", s, sep = ""), dialog_data %>% filter(session == s))
}
print("Low performance sessions")
for (s in low_perf$session){
print(paste("Session: ", s))
assign(paste("df_low_", s, sep = ""), dialog_data %>% filter(session == s))
}
# fail
print("Failed sessions")
for (s in fail_perf$session){
print(paste("Session: ", s))
assign(paste("df_fail_", s, sep = ""), dialog_data %>% filter(session == s))
}
session_data <- df_high_2104
# Last Updated: 02/12
rm(list = ls())
# Load libraries
library(rstudioapi)
library(tidyverse)
library(tidyr)
library(ggplot2)
library(dplyr)
library(RColorBrewer)
library(dplyr)
library(igraph)
library(readxl)
library(igraph)
library(glmnet)
library(remsonic)
library(skimr)
library(dplyr)
library(relevent)
# Set Path
setwd("~/RProjects/SNA_REM/REM_new/")
# read excel
dialog_data <- read_excel("data/nek21.xlsx", sheet = "Sheet1_Dialogs")
head(dialog_data)
# if the sender is All, make ID is 0
people_list <- people_list[people_list != "All"]
# Last Updated: 02/12
rm(list = ls())
# Load libraries
library(rstudioapi)
library(tidyverse)
library(tidyr)
library(ggplot2)
library(dplyr)
library(RColorBrewer)
library(dplyr)
library(igraph)
library(readxl)
library(igraph)
library(glmnet)
library(remsonic)
library(skimr)
library(dplyr)
library(relevent)
# Set Path
setwd("~/RProjects/SNA_REM/REM_new/")
# read excel
dialog_data <- read_excel("data/nek21.xlsx", sheet = "Sheet1_Dialogs")
head(dialog_data)
# if the sender is All, make ID is 0
people_list <- people_list[people_list != "All"]
# Last Updated: 02/12
rm(list = ls())
# Load libraries
library(rstudioapi)
library(tidyverse)
library(tidyr)
library(ggplot2)
library(dplyr)
library(RColorBrewer)
library(dplyr)
library(igraph)
library(readxl)
library(igraph)
library(glmnet)
library(remsonic)
library(skimr)
library(dplyr)
library(relevent)
# Set Path
setwd("~/RProjects/SNA_REM/REM_new/")
# read excel
dialog_data <- read_excel("data/nek21.xlsx", sheet = "Sheet1_Dialogs")
head(dialog_data)
people_list <- unique(dialog_data$sender)
# if the sender is All, make ID is 0
people_list <- people_list[people_list != "All"]
lookup_table <- setNames(seq_along(people_list), people_list)
# add All to the lookup table with ID 0
lookup_table <- c(All = 0,lookup_table)
print(lookup_table)
dialog_data[, 'sender_id'] <- lookup_table[dialog_data$sender]
dialog_data[,'receiver_id'] <- lookup_table[dialog_data$receiver]
head(dialog_data)
perf_data <- read_excel("data/nek21.xlsx", sheet = "Sheet2_Perfs")
head(perf_data)
# find all sessionsi of where perf_level is low, high, fail respectively
low_perf <- perf_data %>% filter(perf_level == "low")
high_perf <- perf_data %>% filter(perf_level == "high")
fail_perf <- perf_data %>% filter(perf_level == "fail")
print(paste("Number of low performance sessions: ", nrow(low_perf), list(low_perf$session)))
print(paste("Number of high performance sessions: ", nrow(high_perf), list(high_perf$session)))
print(paste("Number of fail performance sessions: ", nrow(fail_perf), list(fail_perf$session)))
print("High performance sessions")
# get the high performance session 2104, 2105, 2112, 2113, 2114, 2118
for(s in high_perf$session){
print(paste("Session: ", s))
# name each df based on the session and store as data frame
assign(paste("df_high_", s, sep = ""), dialog_data %>% filter(session == s))
}
print("Low performance sessions")
for (s in low_perf$session){
print(paste("Session: ", s))
assign(paste("df_low_", s, sep = ""), dialog_data %>% filter(session == s))
}
# fail
print("Failed sessions")
for (s in fail_perf$session){
print(paste("Session: ", s))
assign(paste("df_fail_", s, sep = ""), dialog_data %>% filter(session == s))
}
session_data <- df_high_2104
# Calculate statistics for the REM
stats.intercept <- Constant(session_data)
# consisteing of sid (sender id), rid (receiver id), time (event order),
session_data <- df_high_2104 %>% data.frame(sid = sender_id, rid = receiver_id, time = event_order)
# consisteing of sid (sender id), rid (receiver id), time (event order),
session_data <- df_high_2104 %>% data.frame(sid = sender_id, rid = receiver_id, time = event_order)
df_high_2104
print("High performance sessions")
# get the high performance session 2104, 2105, 2112, 2113, 2114, 2118
for(s in high_perf$session){
print(paste("Session: ", s))
# for each session, add numbers 1 to the total row numbers representing the event order
perf_data <- dialog_data %>% filter(session == s) %>% mutate(event_order = seq(1, nrow(dialog_data)))
# name each df based on the session and store as data frame
assign(paste("df_high_", s, sep = ""), dialog_data %>% filter(session == s))
}
# get the high performance session 2104, 2105, 2112, 2113, 2114, 2118
for(s in high_perf$session){
print(paste("Session: ", s))
# for each session, add numbers 1 to the total row numbers representing the event order
session_data <- dialog_data %>% filter(session == s)
session_data <- session_data %>% mutate(event_order = seq(1, nrow(dialog_data)))
# name each df based on the session and store as data frame
assign(paste("df_high_", s, sep = ""), session_data)
}
dialog_data
print("High performance sessions")
# get the high performance session 2104, 2105, 2112, 2113, 2114, 2118
for(s in high_perf$session){
print(paste("Session: ", s))
# for each session, add numbers 1 to the total row numbers representing the event order
session_data <- dialog_data %>% filter(session == s)
session_data <- session_data %>% mutate(event_order = seq(1, nrow(dialog_data)))
# name each df based on the session and store as data frame
assign(paste("df_high_", s, sep = ""), session_data)
}
}
print("High performance sessions")
# get the high performance session 2104, 2105, 2112, 2113, 2114, 2118
for(s in high_perf$session){
print(paste("Session: ", s))
# for each session, add numbers 1 to the total row numbers representing the event order
session_data <- dialog_data %>% filter(session == s)
session_data <- session_data %>% mutate(event_order = seq(1, nrow(dialog_data)))
# name each df based on the session and store as data frame
print(session_data))
# get the high performance session 2104, 2105, 2112, 2113, 2114, 2118
for(s in high_perf$session){
print(paste("Session: ", s))
# for each session, add numbers 1 to the total row numbers representing the event order
session_data <- dialog_data %>% filter(session == s)
session_data <- session_data %>% mutate(event_order = seq(1, nrow(dialog_data)))
# name each df based on the session and store as data frame
print(session_data)
}
# get the high performance session 2104, 2105, 2112, 2113, 2114, 2118
for(s in high_perf$session){
print(paste("Session: ", s))
# for each session, add numbers 1 to the total row numbers representing the event order
session_data <- dialog_data %>% filter(session == s)
session_data <- session_data %>% mutate(event_order = seq(1, nrow(session_data)))
# name each df based on the session and store as data frame
print(session_data)
}
# get the high performance session 2104, 2105, 2112, 2113, 2114, 2118
for(s in high_perf$session){
print(paste("Session: ", s))
# for each session, add numbers 1 to the total row numbers representing the event order
session_data <- dialog_data %>% filter(session == s)
session_data <- session_data %>% mutate(event_order = seq(1, nrow(session_data)))
print(session_data)
}
# fail
print("Failed sessions")
for (s in fail_perf$session){
print(paste("Session: ", s))
ession_data <- dialog_data %>% filter(session == s)
session_data <- session_data %>% mutate(event_order = seq(1, nrow(session_data)))
assign(paste("df_fail_", s, sep = ""), session_data)
}
print("High performance sessions")
# get the high performance session 2104, 2105, 2112, 2113, 2114, 2118
for(s in high_perf$session){
print(paste("Session: ", s))
# for each session, add numbers 1 to the total row numbers representing the event order
session_data <- dialog_data %>% filter(session == s)
session_data <- session_data %>% mutate(event_order = seq(1, nrow(session_data)))
assign(paste("df_low_", s, sep = ""), session_data)
}
print("Low performance sessions")
for (s in low_perf$session){
print(paste("Session: ", s))
session_data <- dialog_data %>% filter(session == s)
session_data <- session_data %>% mutate(event_order = seq(1, nrow(session_data)))
assign(paste("df_low_", s, sep = ""), session_data)
}
# fail
print("Failed sessions")
for (s in fail_perf$session){
print(paste("Session: ", s))
ession_data <- dialog_data %>% filter(session == s)
session_data <- session_data %>% mutate(event_order = seq(1, nrow(session_data)))
assign(paste("df_fail_", s, sep = ""), session_data)
}
session_data <- df_high_2104 %>% data.frame(sid = sender_id, rid = receiver_id, time = event_order)
df_high_2104
session_data
print("High performance sessions")
# get the high performance session 2104, 2105, 2112, 2113, 2114, 2118
for(s in high_perf$session){
print(paste("Session: ", s))
# for each session, add numbers 1 to the total row numbers representing the event order
session_data <- dialog_data %>% filter(session == s)
session_data <- session_data %>% mutate(event_order = seq(1, nrow(session_data)))
assign(paste("df_low_", s, sep = ""), session_data)
}
print("Low performance sessions")
for (s in low_perf$session){
print(paste("Session: ", s))
session_data <- dialog_data %>% filter(session == s)
session_data <- session_data %>% mutate(event_order = seq(1, nrow(session_data)))
assign(paste("df_low_", s, sep = ""), session_data)
}
# fail
print("Failed sessions")
for (s in fail_perf$session){
print(paste("Session: ", s))
ession_data <- dialog_data %>% filter(session == s)
session_data <- session_data %>% mutate(event_order = seq(1, nrow(session_data)))
assign(paste("df_fail_", s, sep = ""), session_data)
}
df_high_2104
print("High performance sessions")
# get the high performance session 2104, 2105, 2112, 2113, 2114, 2118
for(s in high_perf$session){
print(paste("Session: ", s))
# for each session, add numbers 1 to the total row numbers representing the event order
session_data <- dialog_data %>% filter(session == s)
session_data <- session_data %>% mutate(event_order = seq(1, nrow(session_data)))
assign(paste("df_high_", s, sep = ""), session_data)
}
print("Low performance sessions")
for (s in low_perf$session){
print(paste("Session: ", s))
session_data <- dialog_data %>% filter(session == s)
session_data <- session_data %>% mutate(event_order = seq(1, nrow(session_data)))
assign(paste("df_low_", s, sep = ""), session_data)
}
# fail
print("Failed sessions")
for (s in fail_perf$session){
print(paste("Session: ", s))
ession_data <- dialog_data %>% filter(session == s)
session_data <- session_data %>% mutate(event_order = seq(1, nrow(session_data)))
assign(paste("df_fail_", s, sep = ""), session_data)
}
print("High performance sessions")
# get the high performance session 2104, 2105, 2112, 2113, 2114, 2118
for(s in high_perf$session){
print(paste("Session: ", s))
# for each session, add numbers 1 to the total row numbers representing the event order
session_data <- dialog_data %>% filter(session == s)
session_data <- session_data %>% mutate(event_order = seq(1, nrow(session_data)))
assign(paste("df_high_", s, sep = ""), session_data)
}
print("Low performance sessions")
for (s in low_perf$session){
print(paste("Session: ", s))
session_data <- dialog_data %>% filter(session == s)
session_data <- session_data %>% mutate(event_order = seq(1, nrow(session_data)))
assign(paste("df_low_", s, sep = ""), session_data)
}
# fail
print("Failed sessions")
for (s in fail_perf$session){
print(paste("Session: ", s))
ession_data <- dialog_data %>% filter(session == s)
session_data <- session_data %>% mutate(event_order = seq(1, nrow(session_data)))
assign(paste("df_fail_", s, sep = ""), session_data)
}
session_data <- df_high_2104 %>% data.frame(sid = sender_id, rid = receiver_id, time = event_order)
# Calculate statistics for the REM
stats.intercept <- Constant(session_data)
df_high_2104
session_data <- df_high_2104 %>% data.frame(sender_id, receiver_id, event_order)
# Calculate statistics for the REM
stats.intercept <- Constant(session_data)
session_data <- df_high_2104 %>% data.frame(sender_id, receiver_id, event_order)
session_data <- df_high_2104 %>% as.data.frame(sender_id, receiver_id, event_order)
session_data
# Calculate statistics for the REM
stats.intercept <- Constant(session_data)
session_data <- df_high_2104 %>% as.data.frame() %>% select(event_order, sender_id, receiver_id)
# Calculate statistics for the REM
stats.intercept <- Constant(session_data)
session_data <- df_high_2104 %>% as.data.frame() %>% select(event_order, sender_id, receiver_id)
# Calculate statistics for the REM
stats.intercept <- Constant(session_data)
# Last Updated: 02/12
rm(list = ls())
# Load libraries
library(rstudioapi)
library(tidyverse)
library(tidyr)
library(ggplot2)
library(dplyr)
library(RColorBrewer)
library(dplyr)
library(igraph)
library(readxl)
library(igraph)
library(glmnet)
library(remsonic)
library(skimr)
library(dplyr)
library(relevent)
# Set Path
setwd("~/RProjects/SNA_REM/REM_new/")
# read excel
data <- read_excel("data/nek21_2103.xlsx")
# read excel
dialog_data <- read_excel("data/nek21.xlsx", sheet = "Sheet1_Dialogs")
head(dialog_data)
head(dialog_data)
df_high2105 <- data[dialog_data$session == 2105,]
df_high2105 <- dialog_data[dialog_data$session == 2105,]
head(df_high2105)
people_list <- unique(df_high2105$sender)
lookup_table <- setNames(seq_along(people_list), people_list)
print(lookup_table)
df_high2105[,'sender_id'] <- lookup_table[df_high2105$sender]
df_high2105[,'receiver_id'] <- lookup_table[df_high2105$receiver]
head(df_high2105)
# for event order, add 1 to make it start from 1  and icnreasing by 1 (row number)
df_high2105[,'event_order'] <- seq(1, nrow(df_high2105))
head(df_high2105)
# Load the data
data <- data.frame(sid = df_high2105$sender_id, rid = df_high2105$receiver_id, time = df_high2105$event_order)
# Calculate statistics for the REM
stats.intercept <- Constant(data)
stats.rrecsnd <- RRecSnd(data)
stats.rsndsnd <- RSndSnd(data)
# Combine statistics
stats1 <- combine.stats(
'[Intercept]' = stats.intercept,
'RRecSnd' = stats.rrecsnd,
'RSndSnd' = stats.rsndsnd
)
# Fit the first REM model
model1 <- FitEventNetworkCore(data, stats1)
summary(model1)
# Model 2 -----------------------------------------------------------------
data <- data.frame(sid = df_high2105$sender_id, rid = df_high2105$receiver_id, time = df_high2105$event_order,sender_dialog = df_high2105$sender_dialog)
# Adding the second term: the Normalized Total Degree Received (NTDRec)
stats.ntdegrec <- NTDRec(data)
stats2 <- combine.stats(
'[Intercept]' <- stats.intercept,
'RRecSnd' = stats.rrecsnd,
'RSndSnd' = stats.rsndsnd,
'NTDegRec' = stats.ntdegrec
)
# Run the second model and check the transript_data
model2 <- FitEventNetworkCore(data, stats2, ordinal = FALSE)
summary(model2)
# add a column representing if the sender and receiver are of the same gender
same_gender <- ifelse(df_high2105$sender_gender == df_high2105$receiver_gender, 1, 0)
data <- data.frame(sid = df_high2105$sender_id, rid = df_high2105$receiver_id, time = df_high2105$event_order,sender_dialog = df_high2105$sender_dialog)
# Model 3 -----------------------------------------------------------------
stats.sameGender <- SameConstGroup(data, same_gender)
stats3 <- combine.stats(
'[Intercept]' = stats.intercept,
'RRecSnd' = stats.rrecsnd,
'RSndSnd' = stats.rsndsnd,
'NTDegRec' = stats.ntdegrec,
'SameConstGroup' = stats.sameGender
)
# Run the third model and check the transript_data
model3 <- FitEventNetworkCore(data, stats3, ordinal = FALSE)
summary(model3)
# Model 4 -----------------------------------------------------------------
#same_gender and sender_dialog
data <- data.frame(sid = df_high2105$sender_id, rid = df_high2105$receiver_id, time = df_high2105$event_order,sender_dialog = df_high2105$sender_dialog)
# Model 4 -----------------------------------------------------------------
#same_gender and sender_dialog
data <- data.frame(sid = df_high2105$sender_id, rid = df_high2105$receiver_id, time = df_high2105$event_order,sender_dialog = df_high2105$sender_dialog)
stats.SndDialog <- SameConstGroup(data, df_high2105$sender_dialog)
stats.RecDialog <- SameConstGroup(data, df_high2105$receiver_dialog)
stats4 <- combine.stats(
'[Intercept]' = stats.intercept,
'RRecSnd' = stats.rrecsnd,
'RSndSnd' = stats.rsndsnd,
'NTDegRec' = stats.ntdegrec,
'SameConstGroup' = stats.sameGender,
'SndDialog' = stats.SndDialog,
'RecDialog' = stats.RecDialog
)
model4 <- FitEventNetworkCore(data, stats4, ordinal = FALSE)
model4 <- FitEventNetworkCore(data, stats4, ordinal = FALSE)
summary(model4)
# Last Updated: 02/12
rm(list = ls())
# Load libraries
library(rstudioapi)
library(tidyverse)
library(tidyr)
library(ggplot2)
library(dplyr)
library(RColorBrewer)
library(dplyr)
library(igraph)
library(readxl)
library(igraph)
library(glmnet)
library(remsonic)
library(skimr)
library(dplyr)
library(relevent)
# Set Path
setwd("~/RProjects/SNA_REM/REM_new/")
# read excel
dialog_data <- read_excel("data/nek21.xlsx", sheet = "Sheet1_Dialogs")
head(dialog_data)
# Last Updated: 02/12
rm(list = ls())
# Load libraries
library(rstudioapi)
library(tidyverse)
library(tidyr)
library(ggplot2)
library(dplyr)
library(RColorBrewer)
library(dplyr)
library(igraph)
library(readxl)
library(igraph)
library(glmnet)
library(remsonic)
library(skimr)
library(dplyr)
library(relevent)
# Set Path
setwd("~/RProjects/SNA_REM/REM_new/")
# read excel
dialog_data <- read_excel("data/nek21.xlsx", sheet = "Sheet1_Dialogs")
head(dialog_data)
df_low2103 <- dialog_data[dialog_data$session == 2103,]
head(df_low2103)
people_list <- unique(df_low2103$sender)
lookup_table <- setNames(seq_along(people_list), people_list)
print(lookup_table)
df_low2103[,'sender_id'] <- lookup_table[df_low2103$sender]
df_low2103[,'receiver_id'] <- lookup_table[df_low2103$receiver]
head(df_low2103)
# for event order, add 1 to make it start from 1  and icnreasing by 1 (row number)
df_low2103[,'event_order'] <- seq(1, nrow(df_low2103))
head(df_low2103)
# Load the data
data <- data.frame(sid = df_low2103$sender_id, rid = df_low2103$receiver_id, time = df_low2103$event_order)
# Calculate statistics for the REM
stats.intercept <- Constant(data)
stats.rrecsnd <- RRecSnd(data)
stats.rsndsnd <- RSndSnd(data)
# Combine statistics
stats1 <- combine.stats(
'[Intercept]' = stats.intercept,
'RRecSnd' = stats.rrecsnd,
'RSndSnd' = stats.rsndsnd
)
# Fit the first REM model
model1 <- FitEventNetworkCore(data, stats1)
summary(model1)
# Model 2 -----------------------------------------------------------------
data <- data.frame(sid = df_low2103$sender_id, rid = df_low2103$receiver_id, time = df_low2103$event_order,sender_dialog = df_low2103$sender_dialog)
# Adding the second term: the Normalized Total Degree Received (NTDRec)
stats.ntdegrec <- NTDRec(data)
stats2 <- combine.stats(
'[Intercept]' <- stats.intercept,
'RRecSnd' = stats.rrecsnd,
'RSndSnd' = stats.rsndsnd,
'NTDegRec' = stats.ntdegrec
)
# Run the second model and check the transript_data
model2 <- FitEventNetworkCore(data, stats2, ordinal = FALSE)
