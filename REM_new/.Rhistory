summary(model3)
# Model 4 -----------------------------------------------------------------
#same_gender and sender_dialog
data <- data.frame(sid = df_high2105$sender_id, rid = df_high2105$receiver_id, time = df_high2105$event_order, sender_dialog = df_high2105$sender_dialog)
stats.SndDialog <- SameConstGroup(data, df_high2105$sender_dialog)
stats.RecDialog <- SameConstGroup(data, df_high2105$receiver_dialog)
stats4 <- combine.stats(
'[Intercept]' = stats.intercept,
'RRecSnd' = stats.rrecsnd,
'RSndSnd' = stats.rsndsnd,
'NTDegRec' = stats.ntdegrec,
'SameGender' = stats.sameGender,
'SndDialog' = stats.SndDialog,
'RecDialog' = stats.RecDialog
)
model4 <- FitEventNetworkCore(data, stats4, ordinal = FALSE)
summary(model4)
# Last Updated: 02/12
rm(list = ls())
# Load libraries
library(rstudioapi)
library(tidyverse)
library(tidyr)
library(ggplot2)
library(dplyr)
library(dplyr)
library(caret)
library(RColorBrewer)
library(dplyr)
library(igraph)
library(readxl)
library(igraph)
library(glmnet)
library(remsonic)
library(skimr)
library(dplyr)
library(relevent)
# Set Path
setwd("~/RProjects/SNA_REM/REM_new/")
# find all sessionsi of where perf_level is low, high, fail respectively
low_perf <- perf_data %>% filter(perf_level == "low")
people_list <- unique(dialog_data$sender)
people_list <- unique(dialog_data$sender)
# read excel
dialog_data <- read_excel("data/nek21.xlsx", sheet = "Sheet1_Dialogs") %>% select(-receiver_dialog)
head(dialog_data)
people_list <- unique(dialog_data$sender)
people_list <- people_list[people_list != "All"]
lookup_table <- setNames(seq_along(people_list), people_list)
lookup_table <- c(All = 0, lookup_table)
print(lookup_table)
dialog_data[, 'sender_id'] <- lookup_table[dialog_data$sender]
dialog_data[, 'receiver_id'] <- lookup_table[dialog_data$receiver]
head(dialog_data)
# renmove whenever dialogue act is a decision_point
dialog_data <- dialog_data %>% filter(sender_dialog != "decision_point")
head(dialog_data)
perf_data <- read_excel("data/nek21.xlsx", sheet = "Sheet2_Perfs")
head(perf_data)
# find all sessionsi of where perf_level is low, high, fail respectively
low_perf <- perf_data %>% filter(perf_level == "low")
high_perf <- perf_data %>% filter(perf_level == "high")
fail_perf <- perf_data %>% filter(perf_level == "failed")
print(paste("Number of low performance sessions: ", nrow(low_perf), list(low_perf$session)))
print(paste("Number of high performance sessions: ", nrow(high_perf), list(high_perf$session)))
print(paste("Number of fail performance sessions: ", nrow(fail_perf), list(fail_perf$session)))
high_perf_sessions <- c(2114, 2103, 2108, 2115, 2105, 2104, 2112, 2118)
low_perf_sessions <-c(2102, 2106, 2116, 2110, 2107, 2113, 2111, 2117)
high_perf_all <- dialog_data %>% filter(session %in% high_perf_sessions)
low_perf_all <- dialog_data %>% filter(session %in% low_perf_sessions)
high_perf_all <- high_perf_all %>%
group_by(session) %>%
mutate(in_session_event_order= row_number())%>%
ungroup() %>%
arrange(session, in_session_event_order)
low_perf_all <- low_perf_all %>%
group_by(session) %>%
mutate(in_session_event_order = row_number())%>%
ungroup() %>%
arrange(session, in_session_event_order)
high_perf_sessions <- c(2114, 2103, 2108, 2115, 2105, 2104, 2112, 2118)
low_perf_sessions <-c(2102, 2106, 2116, 2110, 2107, 2113, 2111, 2117)
high_perf_all <- dialog_data %>% filter(session %in% high_perf_sessions)
low_perf_all <- dialog_data %>% filter(session %in% low_perf_sessions)
high_perf_all <- high_perf_all %>%
group_by(session) %>%
mutate(in_session_event_order= row_number())%>%
ungroup() %>%
arrange(session, in_session_event_order)
low_perf_all <- low_perf_all %>%
group_by(session) %>%
mutate(in_session_event_order = row_number())%>%
ungroup() %>%
arrange(session, in_session_event_order)
levels(high_perf_all$sender_gender) <- list(male="male", female="female")
levels(low_perf_all$receiver_gender) <- list(male="male", female="female")
levels(low_perf_all$sender_dialog) <- list(as.factor(unique(low_perf_all$sender_dialog)))
dmy_high <- dummyVars(~ sender_gender + receiver_gender + sender_dialog, sep = ".", data = high_perf_all, levelsOnly = FALSE)
trsf_high <- data.frame(predict(dmy_high, newdata = high_perf_all))
head(trsf_high)
high_perf_final <- cbind(high_perf_all, trsf_high)
high_perf_final %>% select(-c(sender, receiver, sender_dialog, sender_gender, receiver_gender, sender_dialog)) %>% select(session, in_session_event_order, everything()) -> high_perf_final
dmy_low <- dummyVars(~ sender_gender + receiver_gender + sender_dialog, sep = ".", data = low_perf_all, levelsOnly = FALSE)
trsf_low <- data.frame(predict(dmy_low, newdata = low_perf_all))
head(trsf_low)
low_perf_final <- cbind(low_perf_all, trsf_low)
low_perf_final %>% select(-c(sender, receiver, sender_dialog, sender_gender, receiver_gender, sender_dialog)) %>% select(session, in_session_event_order, everything()) -> low_perf_final
write_csv(high_perf_final, "data/high_perf_final.csv")
write_csv(low_perf_final, "data/low_perf_final.csv")
levels(high_perf_all$sender_gender) <- list(male="male", female="female")
levels(low_perf_all$receiver_gender) <- list(male="male", female="female")
levels(low_perf_all$sender_dialog) <- list(as.factor(unique(low_perf_all$sender_dialog)))
levels(high_perf_all$sender_gender) <- list(male="male", female="female")
levels(low_perf_all$receiver_gender) <- list(male="male", female="female")
levels(low_perf_all$sender_dialog) <- list(as.factor(unique(low_perf_all$sender_dialog)))
low_perf_all$receiver_gender
levels(high_perf_all$sender_gender) <- list(male="male", female="female")
levels(low_perf_all$receiver_gender) <- list(male="male", female="female")
levels(low_perf_all$sender_dialog) <- list(as.factor(unique(low_perf_all$sender_dialog)))
low_perf_all$sender_dialog
levels(high_perf_all$sender_gender) <- list(male="male", female="female")
levels(low_perf_all$receiver_gender) <- list(male="male", female="female")
levels(low_perf_all$sender_dialog) <- list(as.factor(unique(low_perf_all$sender_dialog)))
levels(high_perf_all$sender_gender) <- list(male="male", female="female")
levels(low_perf_all$receiver_gender) <- list(male="male", female="female")
levels(low_perf_all$sender_dialog) <- list(as.factor(unique(low_perf_all$sender_dialog)))
# Last Updated: 02/12
rm(list = ls())
# Load libraries
library(rstudioapi)
library(tidyverse)
library(tidyr)
library(ggplot2)
library(dplyr)
library(dplyr)
library(caret)
library(RColorBrewer)
library(dplyr)
library(igraph)
library(readxl)
library(igraph)
library(glmnet)
library(remsonic)
library(skimr)
library(dplyr)
library(relevent)
# Set Path
setwd("~/RProjects/SNA_REM/REM_new/")
perf_data <- read_excel("data/nek21.xlsx", sheet = "Sheet2_Perfs")
head(perf_data)
# find all sessionsi of where perf_level is low, high, fail respectively
low_perf <- perf_data %>% filter(perf_level == "low")
high_perf <- perf_data %>% filter(perf_level == "high")
fail_perf <- perf_data %>% filter(perf_level == "failed")
print(paste("Number of low performance sessions: ", nrow(low_perf), list(low_perf$session)))
print(paste("Number of high performance sessions: ", nrow(high_perf), list(high_perf$session)))
print(paste("Number of fail performance sessions: ", nrow(fail_perf), list(fail_perf$session)))
levels(high_perf_all$sender_gender) <- list(male="male", female="female")
high_perf_sessions <- c(2114, 2103, 2108, 2115, 2105, 2104, 2112, 2118)
low_perf_sessions <-c(2102, 2106, 2116, 2110, 2107, 2113, 2111, 2117)
high_perf_all <- dialog_data %>% filter(session %in% high_perf_sessions)
dialog_data
dialog_data[, 'sender_id'] <- lookup_table[dialog_data$sender]
levels(high_perf_all$sender_gender) <- list(male="male", female="female")
levels(high_perf_all$sender_gender) <- list(male="male", female="female")
high_perf_sessions <- c(2114, 2103, 2108, 2115, 2105, 2104, 2112, 2118)
low_perf_sessions <-c(2102, 2106, 2116, 2110, 2107, 2113, 2111, 2117)
high_perf_all <- dialog_data %>% filter(session %in% high_perf_sessions)
dialog_data
# read excel
dialog_data <- read_excel("data/nek21.xlsx", sheet = "Sheet1_Dialogs") %>% select(-receiver_dialog)
head(dialog_data)
high_perf_sessions <- c(2114, 2103, 2108, 2115, 2105, 2104, 2112, 2118)
low_perf_sessions <-c(2102, 2106, 2116, 2110, 2107, 2113, 2111, 2117)
high_perf_all <- dialog_data %>% filter(session %in% high_perf_sessions)
low_perf_all <- dialog_data %>% filter(session %in% low_perf_sessions)
high_perf_all <- high_perf_all %>%
group_by(session) %>%
mutate(in_session_event_order= row_number())%>%
ungroup() %>%
arrange(session, in_session_event_order)
low_perf_all <- low_perf_all %>%
group_by(session) %>%
mutate(in_session_event_order = row_number())%>%
ungroup() %>%
arrange(session, in_session_event_order)
# read excel
dialog_data <- read_excel("data/nek21.xlsx", sheet = "Sheet1_Dialogs") %>% select(-receiver_dialog)
head(dialog_data)
people_list <- unique(dialog_data$sender)
people_list <- people_list[people_list != "All"]
lookup_table <- setNames(seq_along(people_list), people_list)
lookup_table <- c(All = 0, lookup_table)
print(lookup_table)
dialog_data[, 'sender_id'] <- lookup_table[dialog_data$sender]
dialog_data[, 'sender_id'] <- lookup_table[dialog_data$sender]
dialog_data[, 'receiver_id'] <- lookup_table[dialog_data$receiver]
head(dialog_data)
# renmove whenever dialogue act is a decision_point
dialog_data <- dialog_data %>% filter(sender_dialog != "decision_point")
head(dialog_data)
perf_data <- read_excel("data/nek21.xlsx", sheet = "Sheet2_Perfs")
head(perf_data)
# find all sessionsi of where perf_level is low, high, fail respectively
low_perf <- perf_data %>% filter(perf_level == "low")
high_perf <- perf_data %>% filter(perf_level == "high")
fail_perf <- perf_data %>% filter(perf_level == "failed")
print(paste("Number of low performance sessions: ", nrow(low_perf), list(low_perf$session)))
print(paste("Number of high performance sessions: ", nrow(high_perf), list(high_perf$session)))
print(paste("Number of fail performance sessions: ", nrow(fail_perf), list(fail_perf$session)))
high_perf_sessions <- c(2114, 2103, 2108, 2115, 2105, 2104, 2112, 2118)
low_perf_sessions <-c(2102, 2106, 2116, 2110, 2107, 2113, 2111, 2117)
high_perf_all <- dialog_data %>% filter(session %in% high_perf_sessions)
low_perf_all <- dialog_data %>% filter(session %in% low_perf_sessions)
high_perf_all <- high_perf_all %>%
group_by(session) %>%
mutate(in_session_event_order= row_number())%>%
ungroup() %>%
arrange(session, in_session_event_order)
low_perf_all <- low_perf_all %>%
group_by(session) %>%
mutate(in_session_event_order = row_number())%>%
ungroup() %>%
arrange(session, in_session_event_order)
levels(high_perf_all$sender_gender) <- list(male="male", female="female")
levels(low_perf_all$receiver_gender) <- list(male="male", female="female")
levels(low_perf_all$sender_dialog) <- list(as.factor(unique(low_perf_all$sender_dialog)))
dmy_high <- dummyVars(~ sender_gender + receiver_gender + sender_dialog, sep = ".", data = high_perf_all, levelsOnly = FALSE)
trsf_high <- data.frame(predict(dmy_high, newdata = high_perf_all))
head(trsf_high)
high_perf_final <- cbind(high_perf_all, trsf_high)
high_perf_final %>% select(-c(sender, receiver, sender_dialog, sender_gender, receiver_gender, sender_dialog)) %>% select(session, in_session_event_order, everything()) -> high_perf_final
dmy_low <- dummyVars(~ sender_gender + receiver_gender + sender_dialog, sep = ".", data = low_perf_all, levelsOnly = FALSE)
trsf_low <- data.frame(predict(dmy_low, newdata = low_perf_all))
head(trsf_low)
low_perf_final <- cbind(low_perf_all, trsf_low)
low_perf_final %>% select(-c(sender, receiver, sender_dialog, sender_gender, receiver_gender, sender_dialog)) %>% select(session, in_session_event_order, everything()) -> low_perf_final
write_csv(high_perf_final, "data/high_perf_final.csv")
write_csv(low_perf_final, "data/low_perf_final.csv")
saveRDS(high_perf_final, "data/high_perf_final.RData")
saveRDS(low_perf_final, "data/low_perf_final.RData")
# Last Updated: 02/12
rm(list = ls())
# Load libraries
library(rstudioapi)
library(tidyverse)
library(tidyr)
library(ggplot2)
library(dplyr)
library(dplyr)
library(caret)
library(RColorBrewer)
library(dplyr)
library(igraph)
library(readxl)
library(igraph)
library(glmnet)
library(remsonic)
library(skimr)
library(dplyr)
library(relevent)
# Set Path
setwd("~/RProjects/SNA_REM/REM_new/")
# read excel
dialog_data <- read_excel("data/nek21.xlsx", sheet = "Sheet1_Dialogs") %>% select(-receiver_dialog)
head(dialog_data)
people_list <- unique(dialog_data$sender)
people_list <- people_list[people_list != "All"]
lookup_table <- setNames(seq_along(people_list), people_list)
lookup_table <- c(All = 0, lookup_table)
print(lookup_table)
dialog_data[, 'sender_id'] <- lookup_table[dialog_data$sender]
dialog_data[, 'receiver_id'] <- lookup_table[dialog_data$receiver]
head(dialog_data)
# renmove whenever dialogue act is a decision_point
dialog_data <- dialog_data %>% filter(sender_dialog != "decision_point")
head(dialog_data)
perf_data <- read_excel("data/nek21.xlsx", sheet = "Sheet2_Perfs")
head(perf_data)
# find all sessionsi of where perf_level is low, high, fail respectively
low_perf <- perf_data %>% filter(perf_level == "low")
high_perf <- perf_data %>% filter(perf_level == "high")
fail_perf <- perf_data %>% filter(perf_level == "failed")
print(paste("Number of low performance sessions: ", nrow(low_perf), list(low_perf$session)))
print(paste("Number of high performance sessions: ", nrow(high_perf), list(high_perf$session)))
print(paste("Number of fail performance sessions: ", nrow(fail_perf), list(fail_perf$session)))
high_perf_sessions <- c(2114, 2103, 2108, 2115, 2105, 2104, 2112, 2118)
low_perf_sessions <-c(2102, 2106, 2116, 2110, 2107, 2113, 2111, 2117)
high_perf_all <- dialog_data %>% filter(session %in% high_perf_sessions)
low_perf_all <- dialog_data %>% filter(session %in% low_perf_sessions)
high_perf_all <- high_perf_all %>%
group_by(session) %>%
mutate(in_session_event_order= row_number())%>%
ungroup() %>%
arrange(session, in_session_event_order)
low_perf_all <- low_perf_all %>%
group_by(session) %>%
mutate(in_session_event_order = row_number())%>%
ungroup() %>%
arrange(session, in_session_event_order)
levels(high_perf_all$sender_gender) <- list(male="male", female="female")
levels(low_perf_all$receiver_gender) <- list(male="male", female="female")
levels(low_perf_all$sender_dialog) <- list(as.factor(unique(low_perf_all$sender_dialog)))
dmy_high <- dummyVars(~ sender_gender + receiver_gender + sender_dialog, sep = ".", data = high_perf_all, levelsOnly = FALSE)
trsf_high <- data.frame(predict(dmy_high, newdata = high_perf_all))
head(trsf_high)
high_perf_final <- cbind(high_perf_all, trsf_high)
high_perf_final %>% select(-c(sender, receiver, sender_dialog, sender_gender, receiver_gender, sender_dialog)) %>% select(session, in_session_event_order, everything()) -> high_perf_final
dmy_low <- dummyVars(~ sender_gender + receiver_gender + sender_dialog, sep = ".", data = low_perf_all, levelsOnly = FALSE)
trsf_low <- data.frame(predict(dmy_low, newdata = low_perf_all))
head(trsf_low)
low_perf_final <- cbind(low_perf_all, trsf_low)
low_perf_final %>% select(-c(sender, receiver, sender_dialog, sender_gender, receiver_gender, sender_dialog)) %>% select(session, in_session_event_order, everything()) -> low_perf_final
write_csv(high_perf_final, "data/high_perf_final.csv")
write_csv(low_perf_final, "data/low_perf_final.csv")
saveRDS(high_perf_final, "data/high_perf_final.RData")
saveRDS(low_perf_final, "data/low_perf_final.RData")
high <- read.csv("data/high_perf_final.csv")
low <- read.csv("data/low_perf_final.csv")
head(high)
head(low)
high <- high %>%
group_by(session) %>%
mutate(event_order = row_number())%>%
ungroup()
head(high)
high %>% saveRDS("data/high_final.RData")
low %>% saveRDS("data/low_perf_all.RData")
data <- data.frame(sid = high$sender_id, rid = high$receiver_id, time = high$event_order)
data
data <- data.frame(sid = high$sender_id, rid = high$receiver_id, time = high$event_order)
# Calculate statistics for the REM
stats.intercept <- Constant(data)
stats.rrecsnd <- RRecSnd(data)
stats.rsndsnd <- RSndSnd(data)
# Combine statistics
stats1 <- combine.stats(
'[Intercept]' = stats.intercept,
'RRecSnd' = stats.rrecsnd,
'RSndSnd' = stats.rsndsnd
)
# Fit the first REM model
model1 <- FitEventNetworkCore(data, stats1, ordinal = FALSE)
high_perf_sessions <- c(2114, 2103, 2108, 2115, 2105, 2104, 2112, 2118)
low_perf_sessions <-c(2102, 2106, 2116, 2110, 2107, 2113, 2111, 2117)
high_perf_all <- dialog_data %>% filter(session %in% high_perf_sessions)
low_perf_all <- dialog_data %>% filter(session %in% low_perf_sessions)
high_perf_all <- high_perf_all %>%
group_by(session) %>%
mutate(in_session_event_order= row_number())%>%
ungroup() %>%
arrange(session, in_session_event_order)
low_perf_all <- low_perf_all %>%
group_by(session) %>%
mutate(in_session_event_order = row_number())%>%
ungroup() %>%
arrange(session, in_session_event_order)
levels(high_perf_all$sender_gender) <- list(male="male", female="female")
levels(low_perf_all$receiver_gender) <- list(male="male", female="female")
levels(low_perf_all$sender_dialog) <- list(as.factor(unique(low_perf_all$sender_dialog)))
dmy_high <- dummyVars(~ sender_gender + receiver_gender + sender_dialog, sep = ".", data = high_perf_all, levelsOnly = FALSE)
trsf_high <- data.frame(predict(dmy_high, newdata = high_perf_all))
head(trsf_high)
high_perf_final <- cbind(high_perf_all, trsf_high)
high_perf_final %>% select(-c(sender, receiver, sender_dialog, sender_gender, receiver_gender, sender_dialog)) %>% select(session, in_session_event_order, everything()) -> high_perf_final
dmy_low <- dummyVars(~ sender_gender + receiver_gender + sender_dialog, sep = ".", data = low_perf_all, levelsOnly = FALSE)
trsf_low <- data.frame(predict(dmy_low, newdata = low_perf_all))
head(trsf_low)
low_perf_final <- cbind(low_perf_all, trsf_low)
low_perf_final %>% select(-c(sender, receiver, sender_dialog, sender_gender, receiver_gender, sender_dialog)) %>% select(session, in_session_event_order, everything()) -> low_perf_final
data <- data.frame(sid = high$sender_id, rid = high$receiver_id, time = high$event_order)
# Calculate statistics for the REM
stats.intercept <- Constant(data)
data <- data.frame(sid = high$sender_id, rid = high$receiver_id, time = high$event_order)
# Calculate statistics for the REM
stats.intercept <- Constant(data)
stats1
data
# Calculate statistics for the REM
stats.intercept <- Constant(data)
# Calculate statistics for the REM
stats.intercept <- Constant(data)
stats1
# Fit the first REM model
model1 <- FitEventNetworkCore(data, stats1, ordinal = FALSE)
stats1
stats1
high$receiver_id
type(high$receiver_id)
high$receiver_id
high
data
high$sender_id <- as.factor(high$sender_id)
high$receiver_id <- as.factor(high$receiver_id)
# Calculate statistics for the REM
stats.intercept <- Constant(data)
# Calculate statistics for the REM
stats.intercept <- Constant(data)
stats.rrecsnd <- RRecSnd(data)
stats.rsndsnd <- RSndSnd(data)
# Combine statistics
stats1 <- combine.stats(
'[Intercept]' = stats.intercept,
'RRecSnd' = stats.rrecsnd,
'RSndSnd' = stats.rsndsnd
)
stats1
# Combine statistics
stats1 <- combine.stats(
'[Intercept]' = stats.intercept,
'RRecSnd' = stats.rrecsnd,
'RSndSnd' = stats.rsndsnd
)
stats1
# Fit the first REM model
model1 <- FitEventNetworkCore(data, stats1, ordinal = FALSE)
summary(model1)
library(relevent)
library(relevent)
rm(list = ls())
library(quantmod)
library(Metrics)
library(mvtnorm)
library(dplyr)
library(PerformanceAnalytics)
library(MCMCpack)
library(tseries)
library(fNonlinear)
library(tseries)
library(quantmod)
library(zoo)
library(dplyr)
library(KernSmooth)
r1 <- get.hist.quote(instrument = "NVDA", start = "2023-01-01", quote = "Adj", compression = "d")
p1 <- get.hist.quote(instrument = "NVDA", start = "2023-01-01", quote = "Adj", compression = "d")
# adjusted price for daily adjusted price for stock 1
p1 <- get.hist.quote(instrument = "NVDA", start = "2023-01-01", quote = "Adj", compression = "d")
p1 <- p1$Adj.Close
# adjusted price for daily adjusted price for stock 1
p1 <- get.hist.quote(instrument = "NVDA", start = "2023-01-01", compression = "d")
p1
head(p1)
p1 <- p1$Adj.Close
p1$Adj.Close
# adjusted price for daily adjusted price for stock 1
p1 <- get.hist.quote(instrument = "NVDA", start = "2023-01-01", compression = "d", quote = "AdjClose", provider = "yahoo")
head(p1)
p1 <- get.hist.quote(instrument = "NVDA", start = "2023-01-01", compression = "d", quote = "AdjClose", provider = "yahoo")
head(p1)
head(p1)
p1 <- p1$Adj.Close
head(p1)
# adjusted price for daily adjusted price for stock 1
p1 <- get.hist.quote(instrument = "NVDA", start = "2023-01-01", compression = "d", quote = "AdjClose", provider = "yahoo")
head(p1)
elt(p1$AdjClose, k=1, type = "arithmetic")
Delt(p1$AdjClose, k=1, type = "arithmetic")
# remove missing values
p1 <- na.omit(p1)
diff(p1$AdjClose)
# (pi - pi-1)/pi-1 (percentage change)
ret <- diff(p1)
diff(p1)
p1
# (pi - pi-1)/pi-1 (percentage change)
ret <- diff(p1)
lag(p1, k = -1)
p1
diff(p1)/lag(p1, k = -1)
# (pi - pi-1)/pi-1 (percentage change)
ret <- diff(p1)/lag(p1, k = -1)
# (pi - pi-1)/pi-1 (percentage change)
r1 <- diff(p1)/lag(p1, k = -1)
# (pi - pi-1)/pi-1 (percentage change)
r1 <- diff(p1)/lag(p1, k = -1) * 100
r1
# (pi - pi-1)/pi-1 (percentage change)
r1 <- diff(p1)/lag(p1, k = -1) * 100
head(r1)
# (pi - pi-1)/pi-1 (percentage change)
r1 <- diff(p1)/lag(p1, k = -1) * 100 %>% as.numeric()
r1
# (pi - pi-1)/pi-1 (percentage change)
r1 <- diff(p1)/lag(p1, k = -1) * 100 %>% as.numeric()
head(r1)
# (pi - pi-1)/pi-1 (percentage change)
r1 <- diff(p1)/lag(p1, k = -1) * 100 %>% as.matrix()
# (pi - pi-1)/pi-1 (percentage change)
r1 <- diff(p1)/lag(p1, k = -1) * 100 %>% as.list()
# (pi - pi-1)/pi-1 (percentage change)
r1 <- diff(p1)/lag(p1, k = -1) * 100 %>% as.data.frame()
diff(p1)/lag(p1, k = -1) * 100
# (pi - pi-1)/pi-1 (percentage change)
r1 <- diff(p1$Adjusted)/lag(p1$Adjusted, k = -1) * 100
head(r1)
# (pi - pi-1)/pi-1 (percentage change)
r1 <- diff(p1$Adjusted)/lag(p1$Adjusted, k = -1) * 100 %>% as.numeric()
head(r1)
# (pi - pi-1)/pi-1 (percentage change)
r1 <- diff(p1$Adjusted)/lag(p1$Adjusted, k = -1) * 100 %>% as.matrix()
head(r1)
# (pi - pi-1)/pi-1 (percentage change)
r1 <- diff(p1$Adjusted)/lag(p1$Adjusted, k = -1) * 100 %>% as.matrix()
# (pi - pi-1)/pi-1 (percentage change)
r1 <- diff(p1$Adjusted)/lag(p1$Adjusted, k = -1) * 100 %>% as.numeric()
head(r1)
# (pi - pi-1)/pi-1 (percentage change)
r1 <- lsit(diff(p1$Adjusted)/lag(p1$Adjusted, k = -1) * 100) %>% as.numeric()
head(r1)
)
# (pi - pi-1)/pi-1 (percentage change)
r1 <- list(diff(p1$Adjusted)/lag(p1$Adjusted, k = -1) * 100) %>% as.numeric()
