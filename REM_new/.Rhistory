}
# display as a table
round(as.matrix(t(270 * p)),2)
sum(round(as.matrix(t(270 * p)),2)[7:14])
e <- c(21.51, 54.42, 68.84, 58.05, 36.72, 18.58, 11.88)
o <- c(38, 57, 68, 47, 23, 9, 28)
qchisq(.95, 5)
96.2/240
phat <- 96.2/240
n <- 240
phat <- 96.2/240
phat <- 96.2/240
p <- rep(0, 3)
phat <- 96.2/240
p <- rep(0, 3)
for (k in 0:2) {
p[k + 1] <- dbinom(k, size = 240, prob = phat)
}
p
p[k + 1] <- dbinom(k, size = 120, prob = phat)
for (k in 0:2) {
p[k + 1] <- dbinom(k, size = 120, prob = phat)
}
phat <- 96.2/240
p <- rep(0, 3)
for (k in 0:2) {
p[k + 1] <- dbinom(k, size = 120, prob = phat)
}
p[k + 1] <- dbinom(k, prob = phat)
phat <- 96.2/240
# find the prob od y = 0 , 1, 2 for Binom(2, .4)
n <- 2
p <- rep(0, n + 1)
for (k in 0:n) {
p[k + 1] <- dbinom(k, size = n, prob = phat)
}
p
p * 240
p
t(p * 240)
t(p * 120)
e <- c(p * 120)
e
o <- c(24, 64, 32)
chisq.test(o, p = e / sum(e))
qchisq(.95, 1)
phat <- (64+32*2)/240
# find the prob od y = 0 , 1, 2 for Binom(2, .4)
n <- 2
p <- rep(0, n + 1)
for (k in 0:n) {
p[k + 1] <- dbinom(k, size = n, prob = phat)
}
e <- c(p * 120)
o <- c(24, 64, 32)
chisq.test(o, p = e / sum(e))
qchisq(.95, 1)
phat
phat <- (64+32*2)/240
# find the prob od y = 0 , 1, 2 for Binom(2, .4)
n <- 2
p <- rep(0, n + 1)
for (k in 0:n) {
p[k + 1] <- dbinom(k, size = n, prob = phat)
}
cat("Probabilities of 0, 1, 2 are", p, "\n")
e <- c(p * 120)
cat("Expected values are", e, "\n")
o <- c(24, 64, 32)
chisq.test(o, p = e / sum(e))
qchisq(.95, 1)
phat <- (64+32*2)/240
# find the prob od y = 0 , 1, 2 for Binom(2, .4)
n <- 2
p <- rep(0, n + 1)
for (k in 0:n) {
p[k + 1] <- dbinom(k, size = n, prob = phat)
}
cat("Probabilities of 0, 1, 2 are", p, "\n")
e <- c(p * 120)
cat("Expected values are", e, "\n")
o <- c(24, 64, 32)
chisq.test(o, p = e / sum(e))
cat("Critical value is", qchisq(.95, 1))
```{r}
phat <- (64+32*2)/240
# number of categories
c <- 3
p <- rep(0, c)
for (k in 0:n) {
p[k + 1] <- dbinom(k, size = n, prob = phat)
}
for (k in 0:n) {
p[k + 1] <- dbinom(k, size = n, prob = phat)
}
cat("Under H0, Probabilities:", p, "\n")
e <- c(p * 120)
cat("Under H0, p:", p, "\n")
df <-
cat("Under H0, Expected values", e, "\n")
df <-
cat("Under H0, Expected Counts", e, "\n")
df <-
cat("Under H0, Expected Counts", e, "\n")
num.param.est <- 1
phat <- (64+32*2)/240
# number of categories
c <- 3
p <- rep(0, c)
for (k in 0:n) {
p[k + 1] <- dbinom(k, size = n, prob = phat)
}
cat("Under H0, p:", p, "\n")
num.param.est <- 1
df <- c - num.param.est - 1
e <- c(p * 120)
cat("Under H0, Expected Counts", e, "\n")
o <- c(24, 64, 32)
chisq.test(o, p = e / sum(e))
cat("Critical value of chi-square r.v. with", qchisq(.95, 1))
phat <- (64+32*2)/240
# number of categories
c <- 3
p <- rep(0, c)
for (k in 0:n) {
p[k + 1] <- dbinom(k, size = n, prob = phat)
}
cat("Under H0, p:", p, "\n")
num.param.est <- 1
df <- c - num.param.est - 1
e <- c(p * 120)
cat("Under H0, Expected Counts", e, "\n")
o <- c(24, 64, 32)
chisq.test(o, p = e / sum(e))
cat("Critical value of chi-square r.v. with df = ", df, ":", qchisq(.95, df), "\n")
``
phat <- (64+32*2)/240
# number of categories
c <- 3
p <- rep(0, c)
for (k in 0:n) {
p[k + 1] <- dbinom(k, size = n, prob = phat)
}
cat("Under H0, p:", p, "\n")
num.param.est <- 1
df <- c - num.param.est - 1
e <- c(p * 120)
cat("Under H0, Expected Counts", e, "\n")
o <- c(24, 64, 32)
chisq.test(o, p = e / sum(e))
cat("Critical value of chi-square r.v. with df = ", df, ":", qchisq(.95, df), "\n")
phat <- (64+32*2)/240
# number of categories
c <- 3
p <- rep(0, c)
alpha <- 0.05
for (k in 0:n) {
p[k + 1] <- dbinom(k, size = n, prob = phat)
}
cat("Under H0, p:", p, "\n")
num.param.est <- 1
df <- c - num.param.est - 1
e <- c(p * 120)
cat("Under H0, Expected Counts", e, "\n")
o <- c(24, 64, 32)
chisq.test(o, p = e / sum(e))
cat("Critical value of chi-square r.v. with df = ", df, ":", qchisq(.95, df), "at alpha = ", alpha)
phat <- (64+32*2)/240
# number of categories
c <- 3
p <- rep(0, c)
alpha <- 0.05
for (k in 0:n) {
p[k + 1] <- dbinom(k, size = n, prob = phat)
}
cat("Under H0, p:", p, "\n")
num.param.est <- 1
df <- c - num.param.est - 1
e <- c(p * 120)
cat("Under H0, Expected Counts", e, "\n")
o <- c(24, 64, 32)
chisq.test(o, p = e / sum(e))
cat("Critical value of chi-square r.v. with df = ", df, "is", qchisq(.95, df), "at alpha = ", alpha)
library(tidyverse)
library(crypto2)
library(lubridate)
library(rvest)
library(stats)
library(magrittr)
library(quantmod)
library(tidyquant)
library(dplyr)
library(crypto2)
library(dendextend)
library(PortfolioAnalytics)
library(janitor)
palette(RColorBrewer::brewer.pal(8, "Accent"))
crypto_list <- list(
limit = 1
)
crypto_currency <- crypto_history(limit = 1)
crypto_currency %>%
ggplot() +
geom_line(aes(timestamp, close)) +
labs(title = 'Bitcoin Price', x = 'Date', y = 'Price (USD)') +
theme_minimal()
crypto_list <- list(
limit = 1
)
crypto_currency <- crypto_history(limit = 1)
rypto_currency %>%
mutate(timestamp = as.Date(as.character(timestamp))) %>%
ggplot() +
geom_line(aes(timestamp, close))
crypto_currency %>%
mutate(timestamp = as.Date(as.character(timestamp))) %>%
ggplot() +
geom_line(aes(timestamp, close))
t30_marketcap <- crypto_list() %>%
arrange(rank) %>%
slice(1:30)
t30_crypto_prices <- crypto_history(t30_marketcap) %>%
mutate(timestamp = as.Date(as.character(timestamp))) + theme_void()
library(tidyverse)
library(crypto2)
library(lubridate)
library(rvest)
library(stats)
library(magrittr)
library(quantmod)
library(tidyquant)
library(dplyr)
library(crypto2)
library(dendextend)
library(PortfolioAnalytics)
library(janitor)
palette(RColorBrewer::brewer.pal(8, "Accent"))
stock_table_url <- 'https://en.wikipedia.org/wiki/List_of_S%26P_500_companies'
all_historical_spx_ticker <- stock_table_url %>%
read_html() %>%
html_nodes(css = 'table') %>%
extract() %>%
html_table(fill = T)
pull_all_data <- . %>% tq_get() %>% as.data.frame()
sp_tickers <- all_historical_spx_ticker[[1]] %>%
mutate(symbol = stringr::str_replace_all(string = Symbol, pattern = '[.]', replacement = '-')) %>%
mutate(data = map(symbol, pull_all_data)) %>%
select(-symbol) %>%
unnest_legacy()
sp_tickers <- all_historical_spx_ticker[[1]] %>%
mutate(symbol = stringr::str_replace_all(string = symbol, pattern = '[.]', replacement = '-')) %>%
mutate(data = map(symbol, pull_all_data)) %>%
select(-symbol) %>%
unnest_legacy()
pull_all_data <- . %>% tq_get() %>% as.data.frame()  %>% janitor::clean_names()
sp_tickers <- all_historical_spx_ticker[[1]] %>% janitor::clean_names() %>%
mutate(symbol = stringr::str_replace_all(string = symbol, pattern = '[.]', replacement = '-')) %>%
mutate(data = map(symbol, pull_all_data)) %>%
select(-symbol) %>%
unnest_legacy()
install.packages('tinytex')
install.packages('tinytex')
tinytex::install_tinytex()
tlmgr update --list
tlmgr update --self --all
tlmgr
# Fit the REM
# The model formula will depend on your specific hypothesis and data structure
# Here's an example where we predict events based on sender, target, and the event attribute
REM.model <- rem(REM.data$eventdummy ~ REM.data$sender + REM.data$target + REM.data$eventAttribute + strata(REM.data$eventSequence), data = REM.data)
+ REM.data$eventAttribute
+ REM.data$eventAttribute
readRDS("data/REM_data_onlyevent.RDS") -> REM.data
REM.model <- rem(REM.data$eventdummy ~ REM.data$sender + REM.data$target + REM.data$eventAttribute + strata(REM.data$eventSequence), data = REM.data)
library(survival)
library(survival)
# Assuming REM.data is already created and is ready for analysis
library(rem)
library(survival)
# Assuming REM.data is already created and is ready for analysis
library(rem)
REM.model <- rem(REM.data$eventdummy ~ REM.data$sender + REM.data$target + REM.data$eventAttribute + strata(REM.data$eventSequence), data = REM.data)
REM.model <- rem(REM.data$eventdummy ~ REM.data$sender + REM.data$target + REM.data$eventAttribute + strata(REM.data$eventSequence), data = REM.data)
install.packages("rem")
install.packages("rem")
ï¼Ÿrem
?rem
??re,
??rem
interactions$time<-as.numeric(interactions$time)
interactions$time<-as.numeric(interactions$time)
rm(list=ls())
if (!requireNamespace("network", quietly = TRUE))
install.packages("network")
if (!requireNamespace("tsna", quietly = TRUE))
install.packages("tsna")
if (!requireNamespace("rem", quietly = TRUE))
install.packages("rem", repos = "http://R-Forge.R-project.org")
library(relevent)
setwd("~/RProjects/SNA_REM/REM_new/")
library(dplyr)
library(tidyr)
library(caret)
library(network)
library(relevent)
library(rem)
library(dplyr)
library(ggplot2)
library(igraph)
library(ggraph)
library(RColorBrewer)
# Interactions Data Frame (Edges)
high_perf_interactions <- readRDS("data/high_performance_sessions.RData") %>% select(session, sender_id, receiver_id, dialog, time)
#remove where receiver is all
# Convert the named num vectors to separate columns for IDs and names
interactions <- high_perf_interactions %>%
mutate(
sender_id = as.integer(sender_id),  # Convert sender_id to integer
receiver_id = as.integer(receiver_id), # Convert receiver_id to integer
dialog = as.factor(dialog) # Convert dialog to factor
)
actors_attributes <- data.frame(
id = 1:8,
name = c("Igor", "Ashley", "Will", "Katya", "Saleh", "Oleg", "Vika", "Alex"),
gender = c("male", "female", "male", "female", "male", "male", "female", "male")
)
# Create dummy variables for gender
dummyvars <- dummyVars(" ~ gender", data = actors_attributes)
actors_attributes <- cbind(actors_attributes, predict(dummyvars, actors_attributes)) %>%
select(id, name, gendermale)
session_dialogues <- high_perf_interactions %>%
group_by(session) %>%
summarise(n = n())
ggplot(session_dialogues, aes(x = factor(session), y = n, fill = factor(session))) +
geom_bar(stat = "identity") +
scale_fill_brewer(palette = "Pastel1") +
labs(title = "Number of Dialogues Per Session (High Performance)",
x = "Session",
y = "Number of Dialogues",
fill = "Session") +
theme_minimal() +
theme(legend.position = "none")
dialogues_per_speaker_session <- high_perf_interactions %>%
left_join(actors_attributes, by = c("sender_id" = "id")) %>%
group_by(session, name) %>%
summarise(number_of_dialogues = n(), .groups = 'drop') %>%
arrange(session, desc(number_of_dialogues))
dialogues_summary_tibble <- as_tibble(dialogues_per_speaker_session)
print(dialogues_summary_tibble)
ggplot(dialogues_summary_tibble, aes(x = name, y = number_of_dialogues, fill = name)) +
geom_bar(stat = "identity") +
facet_wrap(~session) +
scale_fill_brewer(palette = "Pastel1") +
labs(subtitle = "Number of Dialogues Per Speaker Per Session (High Performance)",
x = "Speaker",
y = "Number of Dialogues",
fill = "Speaker") +
theme_minimal() +
theme(legend.position = "none")
# total number of dialogues by gender in each session
target_session <- 2104
high_perf_interactions %>% filter(receiver_id != 0) %>% filter(session == target_session) %>% select(-session) %>% mutate(time = 1:nrow(.))  %>% select(sender_id, receiver_id, time,dialog)  %>% mutate(dialog = as.factor(dialog), sender_id = as.integer(sender_id), receiver_id = as.integer(receiver_id)) -> interactions
# renumber sender and receiver
actors_attributes %>% filter(id %in% interactions$sender_id) %>% filter(id %in% interactions$receiver_id) -> actors_attributes
head(actors_attributes)
g_subset <- graph_from_data_frame(interactions, directed = TRUE, vertices = data.frame(actors_attributes))
V(g_subset)$gender <- actors_attributes$gender[match(V(g_subset)$name, actors_attributes$name)]
V(g_subset)$name <- actors_attributes$name[match(V(g_subset)$name, actors_attributes$name)]
dialog_colors <- RColorBrewer::brewer.pal(n = length(unique(interactions$dialog)), name = "Pastel2")
dialog_color_map <- setNames(dialog_colors, unique(interactions$dialog))
ggraph(g_subset, layout = 'fr') +
geom_edge_link(aes(color = dialog), alpha = 0.7, edge_width = .2, lineend = "butt", arrow = arrow(type = 'closed', length = unit(4, 'mm'))) +
scale_edge_color_manual(values = dialog_color_map) +
geom_node_point(aes(color = factor(gender)), size = 4, alpha = 0.8) +
geom_node_text(aes(label = name), repel = TRUE,  color = "black", size = 3, vjust = 1, nudge_x = -.02) +
scale_color_manual(values = c('0' = 'red', '1' = 'cyan')) +
theme_void() +
labs(subtitle = "High Performing Session 2104", color = "Gender", edge_color = "Dialog") +
theme(legend.position = "right", legend.title = element_text(size = 8))
# Calculate network statistics
degree_stats <- degree(g_subset, mode = "all")  # Total degree for undirected graphs
betweenness_stats <- betweenness(g_subset, directed = TRUE)
closeness_stats <- closeness(g_subset)
eigenvector_stats <- eigen_centrality(g_subset)$vector
clustering_coefficient <- transitivity(g_subset, type = "localaverage")
network_stats_summary <- data.frame(
name = V(g_subset)$name,
degree = degree_stats,
betweenness = betweenness_stats,
closeness = closeness_stats,
eigenvector = eigenvector_stats,
clustering_coefficient = clustering_coefficient
)
print(network_stats_summary)
influencers <- network_stats_summary %>%
arrange(desc(betweenness)) %>%
head(3)
print(influencers)
# Check for isolated nodes
isolates <- which(degree(g_subset) == 0)
if (length(isolates) > 0) {
print(V(g_subset)$name[isolates])
}
# Check if the graph is fully connected
is.fully.connected <- is.connected(g_subset)
print(is.fully.connected)
# Check if the graph is directed
is.directed <- is_directed(g_subset)
print(is.directed)
in_degree_stats <- degree(g_subset, mode = "in")
out_degree_stats <- degree(g_subset, mode = "out")
total_degree_stats <- in_degree_stats + out_degree_stats
rbind(in_degree_stats, out_degree_stats, total_degree_stats)
interactions$time<-as.numeric(interactions$time)
# Create the REM data set
REM.data <- createRemDataset(
data = interactions,
sender = interactions$sender_id,
target = interactions$receiver_id,
eventSequence = interactions$time,
eventAttribute = interactions$dialog,
atEventTimesOnly = TRUE,
untilEventOccurrs = TRUE,
includeAllPossibleEvents = FALSE,
returnInputData = FALSE
)
# Check the structure of the REM.data
str(REM.data)
head(REM.data)
#save as RDS
saveRDS(REM.data, "data/REM_data_onlyevent.RDS")
head(REM.data)
library(survival)
surv_object <- Surv(time = REM.data$eventTime, event = REM.data$eventdummy)
library(survival)
# Assuming REM.data is already created and is ready for analysis
library(rem)
REM.data$eventdummy
eventTime
surv_object <- Surv(time = REM.data$eventTime, event = REM.data$eventDummy)
surv_object <- Surv(time = REM.data$eventTime, event = REM.data$eventDummy)
# Fit the Cox model
cox_model <- coxph(surv_object ~ sender + target + eventAttribute, data = REM.data)
# Fit the Cox model
cox_model <- coxph(surv_object ~ sender + target + eventAttribute, data = REM.data)
# Check the summary of the model
summary(cox_model)
# Fit the Cox model
cox_model <- coxph(surv_object ~ sender + target, data = REM.data)
# Check the summary of the model
summary(cox_model)
cox_model <- coxph(surv_object ~ eventAttribute, data = REM.data)
event_cox_model <- coxph(surv_object ~ eventAttribute, data = REM.data)
summary(event_cox_model)
event_cox_model <- coxph(surv_object ~ sender + eventAttribute, data = REM.data)
summary(event_cox_model)
snd_event_model <- coxph(surv_object ~ sender + eventAttribute, data = REM.data)
summary(snd_event_model)
model2_event <- coxph(surv_object ~ eventAttribute, data = REM.data)
summary(model2_event)
model3_snd_even <- coxph(surv_object ~ sender + eventAttribute, data = REM.data)
model3_snd_event <- coxph(surv_object ~ sender + eventAttribute, data = REM.data)
summary(model3_snd_event)
surv_object2 <- Surv(time = REM.data$eventTime, event = REM.data$eventDummy, type = REM.data$eventAttribute)
surv_object2 <- Surv(time = REM.data$eventTime, event = REM.data$eventDummy, type = REM.data$eventAttribute)
surv_object2 <- Surv(time = REM.data$eventTime, event = REM.data$eventDummy, type = "counting")
## Interactions and Actors
rm(list=ls())
setwd("~/RProjects/SNA_REM/REM_new/")
library(tidyr)
library(caret)
library(network)
library(relevent)
library(survival)
library(rem)
library(dplyr)
library(ggplot2)
library(igraph)
library(ggraph)
library(RColorBrewer)
library(tidyr)
# figure center
# tiny format for knitting
knitr::opts_chunk$set(fig.align='center', fig.width=8, fig.height=6, options(tidyr_legacy() = TRUE))
# figure center
# tiny format for knitting
knitr::opts_chunk$set(fig.align='center', fig.width=8, fig.height=6, options(tidyr_legacy()))
# figure center
# tiny format for knitting
knitr::opts_chunk$set(fig.align='center', fig.width=8, fig.height=6, options(tidyr_legacy()))
# figure center
# tiny format for knitting
knitr::opts_chunk$set(fig.align='center', fig.width=8, fig.height=6, options(tidy = TRUE))
degree_stats <- degree(g_subset, mode = "all")
rm(list=ls())
setwd("~/RProjects/SNA_REM/REM_new/")
library(tidyr)
library(caret)
library(network)
library(relevent)
library(survival)
library(rem)
library(dplyr)
library(ggplot2)
library(igraph)
library(ggraph)
library(RColorBrewer)
library(tidyr)
knitr::opts_chunk$set(fig.align='center', fig.width=8, fig.height=6, options(tidy = TRUE))
network_stats_summary
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
