high_perf_all <- high_perf_all %>%
group_by(session) %>%
mutate(in_session_event_order= row_number())%>%
ungroup() %>%
arrange(session, in_session_event_order)
low_perf_all <- low_perf_all %>%
group_by(session) %>%
mutate(in_session_event_order = row_number())%>%
ungroup() %>%
arrange(session, in_session_event_order)
levels(high_perf_all$sender_gender) <- list(male="male", female="female")
levels(low_perf_all$receiver_gender) <- list(male="male", female="female")
levels(low_perf_all$sender_dialog) <- list(as.factor(unique(low_perf_all$sender_dialog)))
dmy <- dummyVars(~ sender_gender + receiver_gender + sender_dialog, sep = ".", data = high_perf_all, levelsOnly = FALSE)
trsf <- data.frame(predict(dmy, newdata = high_perf_all))
head(trsf)
high_perf_final <- cbind(high_perf_all, trsf)
names(high_perf_final)
high_perf_final %>% select(-c(sender, receiver, sender_dialog, sender_gender, receiver_gender, sender_dialog)) %>% select(session, in_session_event_order, everything())
levels(high_perf_all$sender_gender) <- list(male="male", female="female")
levels(low_perf_all$receiver_gender) <- list(male="male", female="female")
levels(low_perf_all$sender_dialog) <- list(as.factor(unique(low_perf_all$sender_dialog)))
dmy_high <- dummyVars(~ sender_gender + receiver_gender + sender_dialog, sep = ".", data = high_perf_all, levelsOnly = FALSE)
trsf <- data.frame(predict(dmy_high, newdata = high_perf_all))
trsf_high <- data.frame(predict(dmy_high, newdata = high_perf_all))
head(trsf_high)
high_perf_final <- cbind(high_perf_all, trsf_high)
names(high_perf_final)
high_perf_final %>% select(-c(sender, receiver, sender_dialog, sender_gender, receiver_gender, sender_dialog)) %>% select(session, in_session_event_order, everything())
high_perf_final %>% select(-c(sender, receiver, sender_dialog, sender_gender, receiver_gender, sender_dialog)) %>% select(session, in_session_event_order, everything()) -> high_perf_final
saveRDS(high_perf_all, "data/high_perf_final")
trsf_high <- data.frame(predict(dmy_high, newdata = low_perf_all))
dmy_low <- dummyVars(~ sender_gender + receiver_gender + sender_dialog, sep = ".", data = high_perf_all, levelsOnly = FALSE)
dmy_low <- dummyVars(~ sender_gender + receiver_gender + sender_dialog, sep = ".", data = low_perf_all, levelsOnly = FALSE)
trsf_low <- data.frame(predict(dmy_low, newdata = low_perf_all))
head(trsf_low)
high_perf_final <- cbind(low_perf_all, trsf_low)
low_perf_final %>% select(-c(sender, receiver, sender_dialog, sender_gender, receiver_gender, sender_dialog)) %>% select(session, in_session_event_order, everything()) -> high_perf_final
low_perf_final %>% select(-c(sender, receiver, sender_dialog, sender_gender, receiver_gender, sender_dialog)) %>% select(session, in_session_event_order, everything()) -> low_perf_final
low_perf_final <- cbind(low_perf_all, trsf_low)
low_perf_final %>% select(-c(sender, receiver, sender_dialog, sender_gender, receiver_gender, sender_dialog)) %>% select(session, in_session_event_order, everything()) -> low_perf_final
# Last Updated: 02/12
rm(list = ls())
# Load libraries
library(rstudioapi)
library(tidyverse)
library(tidyr)
library(ggplot2)
library(dplyr)
library(dplyr)
library(caret)
library(RColorBrewer)
library(dplyr)
library(igraph)
library(readxl)
library(igraph)
library(glmnet)
library(remsonic)
library(skimr)
library(dplyr)
library(relevent)
# Set Path
setwd("~/RProjects/SNA_REM/REM_new/")
# read excel
dialog_data <- read_excel("data/nek21.xlsx", sheet = "Sheet1_Dialogs") %>% select(-receiver_dialog)
head(dialog_data)
people_list <- unique(dialog_data$sender)
people_list <- people_list[people_list != "All"]
lookup_table <- setNames(seq_along(people_list), people_list)
lookup_table <- c(All = 0, lookup_table)
print(lookup_table)
dialog_data[, 'sender_id'] <- lookup_table[dialog_data$sender]
dialog_data[, 'receiver_id'] <- lookup_table[dialog_data$receiver]
head(dialog_data)
# renmove whenever dialogue act is a decision_point
dialog_data <- dialog_data %>% filter(sender_dialog != "decision_point")
head(dialog_data)
perf_data <- read_excel("data/nek21.xlsx", sheet = "Sheet2_Perfs")
head(perf_data)
# find all sessionsi of where perf_level is low, high, fail respectively
low_perf <- perf_data %>% filter(perf_level == "low")
high_perf <- perf_data %>% filter(perf_level == "high")
fail_perf <- perf_data %>% filter(perf_level == "failed")
print(paste("Number of low performance sessions: ", nrow(low_perf), list(low_perf$session)))
print(paste("Number of high performance sessions: ", nrow(high_perf), list(high_perf$session)))
print(paste("Number of fail performance sessions: ", nrow(fail_perf), list(fail_perf$session)))
high_perf_sessions <- c(2114, 2103, 2108, 2115, 2105, 2104, 2112, 2118)
low_perf_sessions <-c(2102, 2106, 2116, 2110, 2107, 2113, 2111, 2117)
high_perf_all <- dialog_data %>% filter(session %in% high_perf_sessions)
low_perf_all <- dialog_data %>% filter(session %in% low_perf_sessions)
high_perf_all <- high_perf_all %>%
group_by(session) %>%
mutate(in_session_event_order= row_number())%>%
ungroup() %>%
arrange(session, in_session_event_order)
low_perf_all <- low_perf_all %>%
group_by(session) %>%
mutate(in_session_event_order = row_number())%>%
ungroup() %>%
arrange(session, in_session_event_order)
levels(high_perf_all$sender_gender) <- list(male="male", female="female")
levels(low_perf_all$receiver_gender) <- list(male="male", female="female")
levels(low_perf_all$sender_dialog) <- list(as.factor(unique(low_perf_all$sender_dialog)))
dmy_high <- dummyVars(~ sender_gender + receiver_gender + sender_dialog, sep = ".", data = high_perf_all, levelsOnly = FALSE)
trsf_high <- data.frame(predict(dmy_high, newdata = high_perf_all))
head(trsf_high)
high_perf_final <- cbind(high_perf_all, trsf_high)
high_perf_final %>% select(-c(sender, receiver, sender_dialog, sender_gender, receiver_gender, sender_dialog)) %>% select(session, in_session_event_order, everything()) -> high_perf_final
dmy_low <- dummyVars(~ sender_gender + receiver_gender + sender_dialog, sep = ".", data = low_perf_all, levelsOnly = FALSE)
trsf_low <- data.frame(predict(dmy_low, newdata = low_perf_all))
head(trsf_low)
low_perf_final <- cbind(low_perf_all, trsf_low)
low_perf_final %>% select(-c(sender, receiver, sender_dialog, sender_gender, receiver_gender, sender_dialog)) %>% select(session, in_session_event_order, everything()) -> low_perf_final
saveRDS(high_perf_all, "data/high_perf_final")
saveRDS(low_perf_all, "data/low_perf_all.RData")
setwd("~/RProjects/SNA_REM")
# Last Updated: 02/12
rm(list = ls())
# Load libraries
library(rstudioapi)
library(tidyverse)
library(tidyr)
library(ggplot2)
library(dplyr)
library(dplyr)
library(caret)
library(RColorBrewer)
library(dplyr)
library(igraph)
library(readxl)
library(igraph)
library(glmnet)
library(remsonic)
library(skimr)
library(dplyr)
library(relevent)
# Set Path
setwd("~/RProjects/SNA_REM/REM_new/")
# read excel
dialog_data <- read_excel("data/nek21.xlsx", sheet = "Sheet1_Dialogs") %>% select(-receiver_dialog)
head(dialog_data)
people_list <- unique(dialog_data$sender)
people_list <- people_list[people_list != "All"]
lookup_table <- setNames(seq_along(people_list), people_list)
lookup_table <- c(All = 0, lookup_table)
print(lookup_table)
dialog_data[, 'sender_id'] <- lookup_table[dialog_data$sender]
dialog_data[, 'receiver_id'] <- lookup_table[dialog_data$receiver]
head(dialog_data)
# renmove whenever dialogue act is a decision_point
dialog_data <- dialog_data %>% filter(sender_dialog != "decision_point")
head(dialog_data)
perf_data <- read_excel("data/nek21.xlsx", sheet = "Sheet2_Perfs")
head(perf_data)
# find all sessionsi of where perf_level is low, high, fail respectively
low_perf <- perf_data %>% filter(perf_level == "low")
high_perf <- perf_data %>% filter(perf_level == "high")
fail_perf <- perf_data %>% filter(perf_level == "failed")
print(paste("Number of low performance sessions: ", nrow(low_perf), list(low_perf$session)))
print(paste("Number of high performance sessions: ", nrow(high_perf), list(high_perf$session)))
print(paste("Number of fail performance sessions: ", nrow(fail_perf), list(fail_perf$session)))
high_perf_sessions <- c(2114, 2103, 2108, 2115, 2105, 2104, 2112, 2118)
low_perf_sessions <-c(2102, 2106, 2116, 2110, 2107, 2113, 2111, 2117)
high_perf_all <- dialog_data %>% filter(session %in% high_perf_sessions)
low_perf_all <- dialog_data %>% filter(session %in% low_perf_sessions)
high_perf_all <- high_perf_all %>%
group_by(session) %>%
mutate(in_session_event_order= row_number())%>%
ungroup() %>%
arrange(session, in_session_event_order)
low_perf_all <- low_perf_all %>%
group_by(session) %>%
mutate(in_session_event_order = row_number())%>%
ungroup() %>%
arrange(session, in_session_event_order)
levels(high_perf_all$sender_gender) <- list(male="male", female="female")
levels(low_perf_all$receiver_gender) <- list(male="male", female="female")
levels(low_perf_all$sender_dialog) <- list(as.factor(unique(low_perf_all$sender_dialog)))
dmy_high <- dummyVars(~ sender_gender + receiver_gender + sender_dialog, sep = ".", data = high_perf_all, levelsOnly = FALSE)
trsf_high <- data.frame(predict(dmy_high, newdata = high_perf_all))
head(trsf_high)
high_perf_final <- cbind(high_perf_all, trsf_high)
high_perf_final %>% select(-c(sender, receiver, sender_dialog, sender_gender, receiver_gender, sender_dialog)) %>% select(session, in_session_event_order, everything()) -> high_perf_final
dmy_low <- dummyVars(~ sender_gender + receiver_gender + sender_dialog, sep = ".", data = low_perf_all, levelsOnly = FALSE)
trsf_low <- data.frame(predict(dmy_low, newdata = low_perf_all))
head(trsf_low)
low_perf_final <- cbind(low_perf_all, trsf_low)
low_perf_final %>% select(-c(sender, receiver, sender_dialog, sender_gender, receiver_gender, sender_dialog)) %>% select(session, in_session_event_order, everything()) -> low_perf_final
saveRDS(high_perf_all, "data/high_perf_final.RData")
saveRDS(low_perf_all, "data/low_perf_final.RData")
high_perf_all <- readRDS("data/high_perf_final.RData")
low_perf_all <- readRDS("data/low_perf_final.RData")
high <- readRDS("data/high_perf_final.RData")
low <- readRDS("data/low_perf_final.RData")
head(high)
high_perf_final %>% select(-c(sender, receiver, sender_dialog, sender_gender, receiver_gender, sender_dialog)) %>% select(session, in_session_event_order, everything()) -> high_perf_final
# Last Updated: 02/12
rm(list = ls())
# Load libraries
library(rstudioapi)
library(tidyverse)
library(tidyr)
library(ggplot2)
library(dplyr)
library(dplyr)
library(caret)
library(RColorBrewer)
library(dplyr)
library(igraph)
library(readxl)
library(igraph)
library(glmnet)
library(remsonic)
library(skimr)
library(dplyr)
library(relevent)
# Set Path
setwd("~/RProjects/SNA_REM/REM_new/")
# read excel
dialog_data <- read_excel("data/nek21.xlsx", sheet = "Sheet1_Dialogs") %>% select(-receiver_dialog)
head(dialog_data)
people_list <- unique(dialog_data$sender)
people_list <- people_list[people_list != "All"]
lookup_table <- setNames(seq_along(people_list), people_list)
lookup_table <- c(All = 0, lookup_table)
print(lookup_table)
dialog_data[, 'sender_id'] <- lookup_table[dialog_data$sender]
dialog_data[, 'receiver_id'] <- lookup_table[dialog_data$receiver]
head(dialog_data)
# renmove whenever dialogue act is a decision_point
dialog_data <- dialog_data %>% filter(sender_dialog != "decision_point")
head(dialog_data)
perf_data <- read_excel("data/nek21.xlsx", sheet = "Sheet2_Perfs")
head(perf_data)
# find all sessionsi of where perf_level is low, high, fail respectively
low_perf <- perf_data %>% filter(perf_level == "low")
high_perf <- perf_data %>% filter(perf_level == "high")
fail_perf <- perf_data %>% filter(perf_level == "failed")
print(paste("Number of low performance sessions: ", nrow(low_perf), list(low_perf$session)))
print(paste("Number of high performance sessions: ", nrow(high_perf), list(high_perf$session)))
print(paste("Number of fail performance sessions: ", nrow(fail_perf), list(fail_perf$session)))
high_perf_sessions <- c(2114, 2103, 2108, 2115, 2105, 2104, 2112, 2118)
low_perf_sessions <-c(2102, 2106, 2116, 2110, 2107, 2113, 2111, 2117)
high_perf_all <- dialog_data %>% filter(session %in% high_perf_sessions)
low_perf_all <- dialog_data %>% filter(session %in% low_perf_sessions)
high_perf_all <- high_perf_all %>%
group_by(session) %>%
mutate(in_session_event_order= row_number())%>%
ungroup() %>%
arrange(session, in_session_event_order)
low_perf_all <- low_perf_all %>%
group_by(session) %>%
mutate(in_session_event_order = row_number())%>%
ungroup() %>%
arrange(session, in_session_event_order)
levels(high_perf_all$sender_gender) <- list(male="male", female="female")
levels(low_perf_all$receiver_gender) <- list(male="male", female="female")
levels(low_perf_all$sender_dialog) <- list(as.factor(unique(low_perf_all$sender_dialog)))
dmy_high <- dummyVars(~ sender_gender + receiver_gender + sender_dialog, sep = ".", data = high_perf_all, levelsOnly = FALSE)
trsf_high <- data.frame(predict(dmy_high, newdata = high_perf_all))
head(trsf_high)
high_perf_final <- cbind(high_perf_all, trsf_high)
high_perf_final %>% select(-c(sender, receiver, sender_dialog, sender_gender, receiver_gender, sender_dialog)) %>% select(session, in_session_event_order, everything()) -> high_perf_final
dmy_low <- dummyVars(~ sender_gender + receiver_gender + sender_dialog, sep = ".", data = low_perf_all, levelsOnly = FALSE)
trsf_low <- data.frame(predict(dmy_low, newdata = low_perf_all))
head(trsf_low)
low_perf_final <- cbind(low_perf_all, trsf_low)
low_perf_final %>% select(-c(sender, receiver, sender_dialog, sender_gender, receiver_gender, sender_dialog)) %>% select(session, in_session_event_order, everything()) -> low_perf_final
saveRDS(high_perf_final, "data/high_perf_final.RData")
saveRDS(low_perf_final, "data/low_perf_final.RData")
# Last Updated: 02/12
rm(list = ls())
# Load libraries
library(rstudioapi)
library(tidyverse)
library(tidyr)
library(ggplot2)
library(dplyr)
library(RColorBrewer)
library(dplyr)
library(igraph)
library(readxl)
library(igraph)
library(glmnet)
library(remsonic)
library(skimr)
library(dplyr)
library(relevent)
library(fastDummies)
# Set Path
setwd("~/RProjects/SNA_REM/REM_new/")
high <- readRDS("data/high_perf_final.RData")
low <- readRDS("data/low_perf_final.RData")
head(high)
# Assign a preliminary event order within each session
high_perf_all <- high_perf_all %>%
group_by(session) %>%
mutate(event_order_within_session = row_number()) %>%
ungroup()
high %>%
group_by(session) %>%
summarise(last_event_order = max(in_session_event_order)) %>%
ungroup()
session_last_event_order <- high %>%
group_by(session) %>%
summarise(last_event_order = max(in_session_event_order)) %>%
ungroup()
head(session_last_event_order)
high %>%
group_by(session)
write_csv(high_perf_final, "data/high_perf_final.csv")
# Last Updated: 02/12
rm(list = ls())
# Load libraries
library(rstudioapi)
library(tidyverse)
library(tidyr)
library(ggplot2)
library(dplyr)
library(dplyr)
library(caret)
library(RColorBrewer)
library(dplyr)
library(igraph)
library(readxl)
library(igraph)
library(glmnet)
library(remsonic)
library(skimr)
library(dplyr)
library(relevent)
# Set Path
setwd("~/RProjects/SNA_REM/REM_new/")
# read excel
dialog_data <- read_excel("data/nek21.xlsx", sheet = "Sheet1_Dialogs") %>% select(-receiver_dialog)
head(dialog_data)
people_list <- unique(dialog_data$sender)
people_list <- people_list[people_list != "All"]
lookup_table <- setNames(seq_along(people_list), people_list)
lookup_table <- c(All = 0, lookup_table)
print(lookup_table)
dialog_data[, 'sender_id'] <- lookup_table[dialog_data$sender]
dialog_data[, 'receiver_id'] <- lookup_table[dialog_data$receiver]
head(dialog_data)
# renmove whenever dialogue act is a decision_point
dialog_data <- dialog_data %>% filter(sender_dialog != "decision_point")
head(dialog_data)
perf_data <- read_excel("data/nek21.xlsx", sheet = "Sheet2_Perfs")
head(perf_data)
# find all sessionsi of where perf_level is low, high, fail respectively
low_perf <- perf_data %>% filter(perf_level == "low")
high_perf <- perf_data %>% filter(perf_level == "high")
fail_perf <- perf_data %>% filter(perf_level == "failed")
print(paste("Number of low performance sessions: ", nrow(low_perf), list(low_perf$session)))
print(paste("Number of high performance sessions: ", nrow(high_perf), list(high_perf$session)))
print(paste("Number of fail performance sessions: ", nrow(fail_perf), list(fail_perf$session)))
high_perf_sessions <- c(2114, 2103, 2108, 2115, 2105, 2104, 2112, 2118)
low_perf_sessions <-c(2102, 2106, 2116, 2110, 2107, 2113, 2111, 2117)
high_perf_all <- dialog_data %>% filter(session %in% high_perf_sessions)
low_perf_all <- dialog_data %>% filter(session %in% low_perf_sessions)
high_perf_all <- high_perf_all %>%
group_by(session) %>%
mutate(in_session_event_order= row_number())%>%
ungroup() %>%
arrange(session, in_session_event_order)
low_perf_all <- low_perf_all %>%
group_by(session) %>%
mutate(in_session_event_order = row_number())%>%
ungroup() %>%
arrange(session, in_session_event_order)
levels(high_perf_all$sender_gender) <- list(male="male", female="female")
levels(low_perf_all$receiver_gender) <- list(male="male", female="female")
levels(low_perf_all$sender_dialog) <- list(as.factor(unique(low_perf_all$sender_dialog)))
dmy_high <- dummyVars(~ sender_gender + receiver_gender + sender_dialog, sep = ".", data = high_perf_all, levelsOnly = FALSE)
trsf_high <- data.frame(predict(dmy_high, newdata = high_perf_all))
head(trsf_high)
high_perf_final <- cbind(high_perf_all, trsf_high)
high_perf_final %>% select(-c(sender, receiver, sender_dialog, sender_gender, receiver_gender, sender_dialog)) %>% select(session, in_session_event_order, everything()) -> high_perf_final
dmy_low <- dummyVars(~ sender_gender + receiver_gender + sender_dialog, sep = ".", data = low_perf_all, levelsOnly = FALSE)
trsf_low <- data.frame(predict(dmy_low, newdata = low_perf_all))
head(trsf_low)
low_perf_final <- cbind(low_perf_all, trsf_low)
low_perf_final %>% select(-c(sender, receiver, sender_dialog, sender_gender, receiver_gender, sender_dialog)) %>% select(session, in_session_event_order, everything()) -> low_perf_final
write_csv(high_perf_final, "data/high_perf_final.csv")
write_csv(low_perf_final, "data/low_perf_final.csv")
write_csv(high_perf_final, "data/high_perf_final.csv")
write_csv(low_perf_final, "data/low_perf_final.csv")
saveRDS(high_perf_final, "data/high_perf_final.RData")
saveRDS(low_perf_final, "data/low_perf_final.RData")
# Last Updated: 02/12
rm(list = ls())
# Load libraries
library(rstudioapi)
library(tidyverse)
library(tidyr)
library(ggplot2)
library(dplyr)
library(RColorBrewer)
library(dplyr)
library(igraph)
library(readxl)
library(igraph)
library(glmnet)
library(remsonic)
library(skimr)
library(dplyr)
library(relevent)
library(fastDummies)
# Set Path
setwd("~/RProjects/SNA_REM/REM_new/")
high <- readRDS("data/high_perf_final.csv")
high <- read.csv("data/high_perf_final.csv")
head(high)
head(high)
read.csv("data/high_perf_final.csv")
high <- read.csv("data/high_perf_final.csv")
head(high)
# Last Updated: 02/12
rm(list = ls())
# Load libraries
library(rstudioapi)
library(tidyverse)
library(tidyr)
library(ggplot2)
library(dplyr)
library(RColorBrewer)
library(dplyr)
library(igraph)
library(readxl)
library(igraph)
library(glmnet)
library(remsonic)
library(skimr)
library(dplyr)
library(relevent)
library(fastDummies)
# Set Path
setwd("~/RProjects/SNA_REM/REM_new/")
high <- read.csv("data/high_perf_final.csv")
head(high)
View(high)
# Last Updated: 02/12
rm(list = ls())
# Load libraries
library(rstudioapi)
library(tidyverse)
library(tidyr)
library(ggplot2)
library(dplyr)
library(RColorBrewer)
library(dplyr)
library(igraph)
library(readxl)
library(igraph)
library(glmnet)
library(remsonic)
library(skimr)
library(dplyr)
library(relevent)
library(fastDummies)
# Set Path
setwd("~/RProjects/SNA_REM/REM_new/")
high <- read.csv("data/high_perf_final.csv")
head(high)
high <- read.csv("data/high_perf_final.csv")
head(high)
high %>%
group_by(session)
high %>%
group_by(session)
# 2nd section starts with 10000 + previous last event order
high <- high %>%
group_by(session) %>%
mutate(event_order = row_number())%>%
# number of seccion before it)
ungroup()
head(high)
head(high)
low <- read.csv("data/low_perf_final.csv")
head(low)
```{r}
skim(high
skim(high)
low %>% saveRDS("data/low_perf_all.RData")
high %>% saveRDS("data/high_final.RData")
low %>% saveRDS("data/low_perf_all.RData")
# Load the data
data <- data.frame(sid = high$sender_id, rid = low$receiver_id, time = high$event_order)
high
# Load the data
data <- data.frame(sid = high$sender_id, rid = high$receiver_id, time = high$event_order)
# Load the data
data <- data.frame(sid = high$sender_id, rid = high$receiver_id, time = high$event_order)
# Calculate statistics for the REM
stats.intercept <- Constant(data)
# Calculate statistics for the REM
stats.intercept <- Constant(data)
stats.rrecsnd <- RRecSnd(data)
stats.rsndsnd <- RSndSnd(data)
data <- data.frame(sid = high$sender_id, rid = high$receiver_id, time = high$event_order)
# Calculate statistics for the REM
stats.intercept <- Constant(data)
stats.rrecsnd <- RRecSnd(data)
stats.rsndsnd <- RSndSnd(data)
# Combine statistics
stats1 <- combine.stats(
'[Intercept]' = stats.intercept,
'RRecSnd' = stats.rrecsnd,
'RSndSnd' = stats.rsndsnd
)
# Fit the first REM model
model1 <- FitEventNetworkCore(data, stats1, ordinal = FALSE)
